
inicio ::= instrucciones:a {: RESULT = a; :}
;

instrucciones ::= instruccion:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
                | instrucciones:a instruccion:b   {: RESULT = a; RESULT.add(b); :}
;

instruccion ::= Variables P_Coma
              | Func_Print:a P_Coma {: RESULT = a;:}
              | Incremento_Decremento P_Coma
              | Sen_Control 
              | Sen_Ciclicas
              | Sen_Transferencia P_Coma 
;

Sen_Return ::= RETURN
             | RETURN EXPRESION
;

Sen_Transferencia ::= BREAK // Usado en ciclos
                    | CONTINUE // Usado en ciclos
                    | Sen_Return // Usado en ciclos y metodos y para la fase 2
;

// Expresiones
/*
--Casteos--
int a double
double a int
int a char
char a int
char a double
*/

EXPRESION ::= MENOS EXPRESION:e %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b                   {: RESULT = new Aritmeticas(a,"+",b,aright, aleft); :}
            | EXPRESION:a MENOS EXPRESION:b                 {: RESULT = new Aritmeticas(a,"-",b,aright, aleft); :}
            | EXPRESION:a POR EXPRESION:b                   {: RESULT = new Aritmeticas(a,"*",b,aright, aleft); :}
            | EXPRESION:a DIVISION EXPRESION:b              {: RESULT = new Aritmeticas(a,"/",b,aright, aleft); :}
            | EXPRESION:a POTENCIA EXPRESION:b              {: RESULT = new Aritmeticas(a,"**",b,aright, aleft); :}
            | EXPRESION:a MODULO EXPRESION:b                {: RESULT = new Aritmeticas(a,"%",b,aright, aleft); :}
            | P_ABRE EXPRESION P_CIERRA                     {:/* RESULT=new Dato(a,"INT", eright, eleft);*/ :}
            | ENTERO:e                                      {: RESULT=new Dato(e,"INT", eright, eleft); :}
            | DECIMAL:e                                     {: RESULT=new Dato(e,"DOUBLE", eright, eleft); :}
            | BOOLEAN:e                                     {: RESULT=new Dato(e,"BOOL", eright, eleft); :}
            | CAR:e                                         {: RESULT=new Dato(e,"CHAR", eright, eleft); :}
            | CAD:e                                         {: RESULT=new Dato(e,"STRING", eright, eleft); :}
            | P_ABRE Tipos_Dato:t P_CIERRA EXPRESION:e  // Casteos
            | IDENTIFICADOR
            | NOT EXPRESION                      
            | EXPRESION COMPARACION EXPRESION    
            | EXPRESION DIFERENCIA EXPRESION     
            | EXPRESION MENOR_IGUAL EXPRESION    
            | EXPRESION MAYOR_IGUAL EXPRESION    
            | EXPRESION MENOR EXPRESION          
            | EXPRESION MAYOR EXPRESION          
            | EXPRESION AND EXPRESION            
            | EXPRESION OR EXPRESION             
            | EXPRESION XOR EXPRESION  
;

// Variables

Tipos_Dato ::= INT    {: RESULT="INT"; :}
             | DOUBLE {: RESULT="DOUBLE"; :}
             | BOOL   {: RESULT="BOOL"; :}
             | CHAR   {: RESULT="CHAR"; :} 
             | STRING {: RESULT="STRING"; :}
;

Mutabilidad ::= VAR
              | CONST 
;

Variables ::= Dec_Variables
            | Asignar_Valor
;

Dec_Variables ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato
                | Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato IGUAL EXPRESION
;

Asignar_Valor ::= IDENTIFICADOR IGUAL EXPRESION 
;

// Función print
Func_Print ::= PRINT P_ABRE EXPRESION:a P_CIERRA {: RESULT =new Print(a,aright, aleft); :}
;

// Incremento y decremento (Solo para decimales y enteros)
Incremento_Decremento ::= IDENTIFICADOR MAS MAS
                        | IDENTIFICADOR MENOS MENOS
;

// Sentencias de control
Sen_Control ::= Sen_IF
              | Sen_Match 
;

// Sentencia if

Sen_Else ::= ELSE LLAVE_A instrucciones LLAVE_C
;

Sen_Else_If ::= ELSE IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C
;

Bloque_Else_If ::= Sen_Else_If
    | Bloque_Else_If Sen_Else_If
;

If_Simple ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C  
;

Sen_IF ::= If_Simple
	 | If_Simple Sen_Else
	 | If_Simple Bloque_Else_If
	 | If_Simple Bloque_Else_If Sen_Else
;

// Sentencia Match

Entry_Cases ::= EXPRESION
		      | DEFAULT // Este solo irá al final y solo uno
;

Cases ::= Entry_Cases IGUAL MAYOR LLAVE_A instrucciones LLAVE_C // uso de break
;

Strcuct_Match ::= Cases
			    | Strcuct_Match Cases
;


Sen_Match ::= MATCH EXPRESION LLAVE_A Strcuct_Match  LLAVE_C
;


// Sentencias Cíclicas

// todas pueden llevar Break, continue y return
Sen_Ciclicas ::= Sen_While
		       | Sen_For
		       | Sen_Do_While P_Coma
;


Sen_While ::= WHILE P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C
;

Signos_For ::= MAYOR
	      	 | MENOR
		     | MAYOR_IGUAL
		     | MENOR_IGUAL
		     | IGUAL
;

Sen_For ::= FOR P_ABRE IDENTIFICADOR Signos_For EXPRESION P_Coma IDENTIFICADOR Signos_For EXPRESION P_Coma Incremento_Decremento P_CIERRA LLAVE_A instrucciones LLAVE_C
;

Sen_Do_While ::= DO LLAVE_A instrucciones LLAVE_C WHILE P_ABRE EXPRESION P_CIERRA
;

//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.LinkedList;
import Interpreter.Expresiones.*;
import Interpreter.Instrucciones.*;
import Interpreter.Funciones.*;
import Interpreter.Instruccion;
import Interpreter.Expresion;
import client.Errors;
import client.TextEditor;
import Interpreter.Entornos.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\021\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\021\003\000" +
    "\002\021\004\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\021\003\000\002\021\004\000\002\014" +
    "\003\000\002\014\004\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\006\000\002\015\003\000" +
    "\002\015\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\004\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\005\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\006\003\000\002\006" +
    "\003\000\002\025\003\000\002\025\003\000\002\023\006" +
    "\000\002\023\010\000\002\026\005\000\002\022\006\000" +
    "\002\030\005\000\002\030\005\000\002\031\003\000\002" +
    "\031\003\000\002\032\015\000\002\032\013\000\002\032" +
    "\011\000\002\016\003\000\002\016\003\000\002\013\010" +
    "\000\002\012\003\000\002\012\004\000\002\040\007\000" +
    "\002\034\003\000\002\034\003\000\002\034\004\000\002" +
    "\033\011\000\002\042\003\000\002\042\003\000\002\036" +
    "\015\000\002\035\012\000\002\004\003\000\002\004\005" +
    "\000\002\005\005\000\002\005\007\000\002\024\014\000" +
    "\002\024\016\000\002\027\010\000\002\027\013\000\002" +
    "\041\003\000\002\041\003\000\002\017\006\000\002\017" +
    "\011\000\002\044\014\000\002\045\010\000\002\020\010" +
    "\000\002\043\003\000\002\043\003\000\002\057\006\000" +
    "\002\057\007\000\002\047\007\000\002\060\005\000\002" +
    "\060\007\000\002\050\012\000\002\051\007\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\061\004" +
    "\000\002\061\006\000\002\053\012\000\002\053\011\000" +
    "\002\054\006\000\002\054\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\042\011\034\027\032\041\056\042\006\043" +
    "\020\054\060\057\024\061\015\063\045\064\014\065\057" +
    "\066\012\067\027\071\033\072\046\076\053\001\002\000" +
    "\004\046\u011e\001\002\000\004\046\uffa0\001\002\000\004" +
    "\043\uffcb\001\002\000\044\002\000\011\034\027\032\041" +
    "\056\042\006\043\020\054\060\057\024\061\015\063\045" +
    "\064\014\065\057\066\012\067\027\071\033\072\046\076" +
    "\053\001\002\000\004\046\u011d\001\002\000\004\046\u011c" +
    "\001\002\000\004\046\uffef\001\002\000\046\002\ufff4\011" +
    "\ufff4\027\ufff4\041\ufff4\042\ufff4\043\ufff4\054\ufff4\056\ufff4" +
    "\057\ufff4\061\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\071\ufff4\072\ufff4\076\ufff4\001\002\000\004\050\u010e" +
    "\001\002\000\024\013\064\030\073\034\066\035\063\036" +
    "\067\037\070\040\076\043\075\050\065\001\002\000\004" +
    "\002\377\001\002\000\004\046\uffa7\001\002\000\014\012" +
    "\347\013\352\047\350\052\351\075\353\001\002\000\004" +
    "\046\346\001\002\000\004\046\345\001\002\000\004\046" +
    "\344\001\002\000\004\050\331\001\002\000\046\002\uffff" +
    "\011\uffff\027\uffff\041\uffff\042\uffff\043\uffff\054\uffff\056" +
    "\uffff\057\uffff\061\uffff\063\uffff\064\uffff\065\uffff\066\uffff" +
    "\067\uffff\071\uffff\072\uffff\076\uffff\001\002\000\046\002" +
    "\uffc1\011\uffc1\027\uffc1\041\uffc1\042\uffc1\043\uffc1\054\uffc1" +
    "\056\uffc1\057\uffc1\061\uffc1\063\uffc1\064\uffc1\065\uffc1\066" +
    "\uffc1\067\uffc1\071\uffc1\072\uffc1\076\uffc1\001\002\000\026" +
    "\013\064\030\073\034\066\035\063\036\067\037\070\040" +
    "\076\043\075\046\ufff2\050\065\001\002\000\004\046\uffee" +
    "\001\002\000\004\046\327\001\002\000\004\043\322\001" +
    "\002\000\004\046\ufff0\001\002\000\004\043\302\001\002" +
    "\000\004\046\uffa6\001\002\000\004\043\233\001\002\000" +
    "\004\046\uff97\001\002\000\046\002\uffb6\011\uffb6\027\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\054\uffb6\056\uffb6\057\uffb6\061" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\071\uffb6" +
    "\072\uffb6\076\uffb6\001\002\000\004\046\232\001\002\000" +
    "\004\046\uff95\001\002\000\004\046\uff9f\001\002\000\004" +
    "\046\uffca\001\002\000\004\050\224\001\002\000\004\022" +
    "\213\001\002\000\046\002\uffc2\011\uffc2\027\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\054\uffc2\056\uffc2\057\uffc2\061\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\071\uffc2\072\uffc2" +
    "\076\uffc2\001\002\000\004\046\uff96\001\002\000\004\046" +
    "\212\001\002\000\004\046\uffc9\001\002\000\004\055\176" +
    "\001\002\000\046\002\ufffa\011\ufffa\027\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\054\ufffa\056\ufffa\057\ufffa\061\ufffa\063\ufffa" +
    "\064\ufffa\065\ufffa\066\ufffa\067\ufffa\071\ufffa\072\ufffa\076" +
    "\ufffa\001\002\000\046\002\ufff9\011\ufff9\027\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\054\ufff9\056\ufff9\057\ufff9\061\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\071\ufff9\072\ufff9" +
    "\076\ufff9\001\002\000\004\043\uffcc\001\002\000\004\055" +
    "\166\001\002\000\004\050\062\001\002\000\046\002\uffb7" +
    "\011\uffb7\027\uffb7\041\uffb7\042\uffb7\043\uffb7\054\uffb7\056" +
    "\uffb7\057\uffb7\061\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\067\uffb7\071\uffb7\072\uffb7\076\uffb7\001\002\000\024\013" +
    "\064\030\073\034\066\035\063\036\067\037\070\040\076" +
    "\043\075\050\065\001\002\000\056\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\031\uffe4\032\uffe4\033\uffe4\044" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\053\uffe4\055\uffe4\056\uffe4" +
    "\001\002\000\024\013\064\030\073\034\066\035\063\036" +
    "\067\037\070\040\076\043\075\050\065\001\002\000\036" +
    "\004\153\005\161\006\157\007\154\010\156\013\064\030" +
    "\073\034\066\035\063\036\067\037\070\040\076\043\075" +
    "\050\065\001\002\000\056\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\031\uffe5\032\uffe5\033\uffe5\044\uffe5\046" +
    "\uffe5\047\uffe5\051\uffe5\053\uffe5\055\uffe5\056\uffe5\001\002" +
    "\000\056\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\044\uffe3\046\uffe3\047\uffe3\051" +
    "\uffe3\053\uffe3\055\uffe3\056\uffe3\001\002\000\056\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\044\uffe2\046\uffe2\047\uffe2\051\uffe2\053\uffe2\055" +
    "\uffe2\056\uffe2\001\002\000\056\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\031\uffde\032\uffde\033\uffde\044\uffde" +
    "\046\uffde\047\uffde\051\uffde\053\uffde\055\uffde\056\uffde\001" +
    "\002\000\056\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\044\uffd3\046\uffd3\047\uffd3" +
    "\051\uffd3\053\uffd3\055\uffd3\056\uffd3\001\002\000\024\013" +
    "\064\030\073\034\066\035\063\036\067\037\070\040\076" +
    "\043\075\050\065\001\002\000\042\012\116\013\110\014" +
    "\114\015\121\016\111\017\120\020\106\021\115\022\112" +
    "\023\123\024\117\025\113\031\105\032\124\033\107\051" +
    "\151\001\002\000\062\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\031\uffdf\032\uffdf\033\uffdf\044\uffdf\046\uffdf" +
    "\047\uffdf\051\uffdf\052\077\053\uffdf\055\uffdf\056\uffdf\075" +
    "\100\001\002\000\056\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\031\uffe1\032\uffe1\033\uffe1\044\uffe1\046\uffe1" +
    "\047\uffe1\051\uffe1\053\uffe1\055\uffe1\056\uffe1\001\002\000" +
    "\024\013\064\030\073\034\066\035\063\036\067\037\070" +
    "\040\076\043\075\050\065\001\002\000\006\026\102\043" +
    "\101\001\002\000\056\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\031\uffd2\032\uffd2\033\uffd2\044\uffd2\046\uffd2" +
    "\047\uffd2\051\uffd2\053\uffd2\055\uffd2\056\uffd2\001\002\000" +
    "\004\050\103\001\002\000\024\013\064\030\073\034\066" +
    "\035\063\036\067\037\070\040\076\043\075\050\065\001" +
    "\002\000\042\012\116\013\110\014\114\015\121\016\111" +
    "\017\120\020\106\021\115\022\112\023\123\024\117\025" +
    "\113\031\105\032\124\033\107\051\122\001\002\000\024" +
    "\013\064\030\073\034\066\035\063\036\067\037\070\040" +
    "\076\043\075\050\065\001\002\000\024\013\064\030\073" +
    "\034\066\035\063\036\067\037\070\040\076\043\075\050" +
    "\065\001\002\000\024\013\064\030\073\034\066\035\063" +
    "\036\067\037\070\040\076\043\075\050\065\001\002\000" +
    "\024\013\064\030\073\034\066\035\063\036\067\037\070" +
    "\040\076\043\075\050\065\001\002\000\024\013\064\030" +
    "\073\034\066\035\063\036\067\037\070\040\076\043\075" +
    "\050\065\001\002\000\024\013\064\030\073\034\066\035" +
    "\063\036\067\037\070\040\076\043\075\050\065\001\002" +
    "\000\024\013\064\030\073\034\066\035\063\036\067\037" +
    "\070\040\076\043\075\050\065\001\002\000\024\013\064" +
    "\030\073\034\066\035\063\036\067\037\070\040\076\043" +
    "\075\050\065\001\002\000\024\013\064\030\073\034\066" +
    "\035\063\036\067\037\070\040\076\043\075\050\065\001" +
    "\002\000\024\013\064\030\073\034\066\035\063\036\067" +
    "\037\070\040\076\043\075\050\065\001\002\000\024\013" +
    "\064\030\073\034\066\035\063\036\067\037\070\040\076" +
    "\043\075\050\065\001\002\000\024\013\064\030\073\034" +
    "\066\035\063\036\067\037\070\040\076\043\075\050\065" +
    "\001\002\000\024\013\064\030\073\034\066\035\063\036" +
    "\067\037\070\040\076\043\075\050\065\001\002\000\056" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\044\uffa1\046\uffa1\047\uffa1\051\uffa1\053" +
    "\uffa1\055\uffa1\056\uffa1\001\002\000\024\013\064\030\073" +
    "\034\066\035\063\036\067\037\070\040\076\043\075\050" +
    "\065\001\002\000\024\013\064\030\073\034\066\035\063" +
    "\036\067\037\070\040\076\043\075\050\065\001\002\000" +
    "\056\012\116\013\110\014\114\015\121\016\111\017\120" +
    "\020\106\021\115\022\112\023\123\024\117\025\113\031" +
    "\105\032\uffd5\033\107\044\uffd5\046\uffd5\047\uffd5\051\uffd5" +
    "\053\uffd5\055\uffd5\056\uffd5\001\002\000\056\012\116\013" +
    "\110\014\114\015\121\016\111\017\120\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\025\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\044\uffdb\046\uffdb\047\uffdb\051\uffdb\053\uffdb\055\uffdb" +
    "\056\uffdb\001\002\000\056\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\111\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\031\uffe9\032\uffe9\033\uffe9\044\uffe9\046" +
    "\uffe9\047\uffe9\051\uffe9\053\uffe9\055\uffe9\056\uffe9\001\002" +
    "\000\056\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\111\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\044\uffe7\046\uffe7\047\uffe7\051" +
    "\uffe7\053\uffe7\055\uffe7\056\uffe7\001\002\000\056\012\116" +
    "\013\110\014\114\015\121\016\111\017\120\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\044\uffd8\046\uffd8\047\uffd8\051\uffd8\053\uffd8\055" +
    "\uffd8\056\uffd8\001\002\000\056\012\uffec\013\uffec\014\114" +
    "\015\121\016\111\017\120\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\031\uffec\032\uffec\033\uffec\044\uffec" +
    "\046\uffec\047\uffec\051\uffec\053\uffec\055\uffec\056\uffec\001" +
    "\002\000\056\012\116\013\110\014\114\015\121\016\111" +
    "\017\120\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\044\uffdc\046\uffdc\047\uffdc" +
    "\051\uffdc\053\uffdc\055\uffdc\056\uffdc\001\002\000\056\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\111\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\031\uffea\032" +
    "\uffea\033\uffea\044\uffea\046\uffea\047\uffea\051\uffea\053\uffea" +
    "\055\uffea\056\uffea\001\002\000\056\012\116\013\110\014" +
    "\114\015\121\016\111\017\120\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\031\uffda\032\uffda\033\uffda\044" +
    "\uffda\046\uffda\047\uffda\051\uffda\053\uffda\055\uffda\056\uffda" +
    "\001\002\000\056\012\116\013\110\014\114\015\121\016" +
    "\111\017\120\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\031\uffd9\032\uffd9\033\uffd9\044\uffd9\046\uffd9\047" +
    "\uffd9\051\uffd9\053\uffd9\055\uffd9\056\uffd9\001\002\000\054" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\044\uffe8\046\uffe8\047\uffe8\051\uffe8\053\uffe8\055" +
    "\uffe8\056\uffe8\001\002\000\056\012\uffeb\013\uffeb\014\114" +
    "\015\121\016\111\017\120\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\031\uffeb\032\uffeb\033\uffeb\044\uffeb" +
    "\046\uffeb\047\uffeb\051\uffeb\053\uffeb\055\uffeb\056\uffeb\001" +
    "\002\000\056\012\116\013\110\014\114\015\121\016\111" +
    "\017\120\020\106\021\115\022\112\023\123\024\117\025" +
    "\113\031\uffd4\032\uffd4\033\uffd4\044\uffd4\046\uffd4\047\uffd4" +
    "\051\uffd4\053\uffd4\055\uffd4\056\uffd4\001\002\000\056\012" +
    "\116\013\110\014\114\015\121\016\111\017\120\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\044\uffdd\046\uffdd\047\uffdd\051\uffdd\053\uffdd" +
    "\055\uffdd\056\uffdd\001\002\000\056\012\116\013\110\014" +
    "\114\015\121\016\111\017\120\020\106\021\115\022\112" +
    "\023\123\024\117\025\113\031\uffd6\032\uffd6\033\107\044" +
    "\uffd6\046\uffd6\047\uffd6\051\uffd6\053\uffd6\055\uffd6\056\uffd6" +
    "\001\002\000\042\012\116\013\110\014\114\015\121\016" +
    "\111\017\120\020\106\021\115\022\112\023\123\024\117" +
    "\025\113\031\105\032\124\033\107\053\145\001\002\000" +
    "\060\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\031" +
    "\uffa5\032\uffa5\033\uffa5\044\uffa5\046\uffa5\047\uffa5\051\uffa5" +
    "\052\146\053\uffa5\055\uffa5\056\uffa5\001\002\000\024\013" +
    "\064\030\073\034\066\035\063\036\067\037\070\040\076" +
    "\043\075\050\065\001\002\000\042\012\116\013\110\014" +
    "\114\015\121\016\111\017\120\020\106\021\115\022\112" +
    "\023\123\024\117\025\113\031\105\032\124\033\107\053" +
    "\150\001\002\000\056\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\031\uffa4\032\uffa4\033\uffa4\044\uffa4\046\uffa4" +
    "\047\uffa4\051\uffa4\053\uffa4\055\uffa4\056\uffa4\001\002\000" +
    "\004\046\uffc5\001\002\000\056\012\116\013\110\014\114" +
    "\015\121\016\111\017\120\020\106\021\115\022\112\023" +
    "\123\024\117\025\113\031\uffd7\032\uffd7\033\uffd7\044\uffd7" +
    "\046\uffd7\047\uffd7\051\uffd7\053\uffd7\055\uffd7\056\uffd7\001" +
    "\002\000\016\024\uffd1\043\uffd1\046\uffd1\047\uffd1\051\uffd1" +
    "\052\uffd1\001\002\000\016\024\uffce\043\uffce\046\uffce\047" +
    "\uffce\051\uffce\052\uffce\001\002\000\004\051\163\001\002" +
    "\000\016\024\uffcd\043\uffcd\046\uffcd\047\uffcd\051\uffcd\052" +
    "\uffcd\001\002\000\016\024\uffcf\043\uffcf\046\uffcf\047\uffcf" +
    "\051\uffcf\052\uffcf\001\002\000\042\012\116\013\110\014" +
    "\114\015\121\016\111\017\120\020\106\021\115\022\112" +
    "\023\123\024\117\025\113\031\105\032\124\033\107\051" +
    "\162\001\002\000\016\024\uffd0\043\uffd0\046\uffd0\047\uffd0" +
    "\051\uffd0\052\uffd0\001\002\000\056\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\031\uffe6\032\uffe6\033\uffe6\044" +
    "\uffe6\046\uffe6\047\uffe6\051\uffe6\053\uffe6\055\uffe6\056\uffe6" +
    "\001\002\000\024\013\064\030\073\034\066\035\063\036" +
    "\067\037\070\040\076\043\075\050\065\001\002\000\056" +
    "\012\116\013\110\014\114\015\121\016\111\017\120\020" +
    "\106\021\115\022\112\023\123\024\117\025\113\031\105" +
    "\032\124\033\107\044\uffe0\046\uffe0\047\uffe0\051\uffe0\053" +
    "\uffe0\055\uffe0\056\uffe0\001\002\000\056\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\031\uffed\032\uffed\033\uffed" +
    "\044\uffed\046\uffed\047\uffed\051\uffed\053\uffed\055\uffed\056" +
    "\uffed\001\002\000\042\011\034\027\032\041\056\042\006" +
    "\043\020\054\060\057\024\061\015\063\045\064\014\065" +
    "\057\066\012\067\027\071\033\072\046\076\053\001\002" +
    "\000\044\011\034\027\032\041\056\042\006\043\020\054" +
    "\060\056\170\057\024\061\015\063\045\064\014\065\057" +
    "\066\012\067\027\071\033\072\046\076\053\001\002\000" +
    "\004\063\172\001\002\000\046\002\ufffe\011\ufffe\027\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\054\ufffe\056\ufffe\057\ufffe\061" +
    "\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\071\ufffe" +
    "\072\ufffe\076\ufffe\001\002\000\004\050\173\001\002\000" +
    "\024\013\064\030\073\034\066\035\063\036\067\037\070" +
    "\040\076\043\075\050\065\001\002\000\042\012\116\013" +
    "\110\014\114\015\121\016\111\017\120\020\106\021\115" +
    "\022\112\023\123\024\117\025\113\031\105\032\124\033" +
    "\107\051\175\001\002\000\004\046\uffb0\001\002\000\004" +
    "\043\177\001\002\000\004\045\207\001\002\000\006\043" +
    "\201\056\202\001\002\000\004\045\204\001\002\000\004" +
    "\043\203\001\002\000\004\046\uff9c\001\002\000\014\004" +
    "\153\005\161\006\157\007\154\010\156\001\002\000\004" +
    "\046\206\001\002\000\006\043\uff9d\056\uff9d\001\002\000" +
    "\014\004\153\005\161\006\157\007\154\010\156\001\002" +
    "\000\004\046\211\001\002\000\006\043\uff9e\056\uff9e\001" +
    "\002\000\046\002\ufffc\011\ufffc\027\ufffc\041\ufffc\042\ufffc" +
    "\043\ufffc\054\ufffc\056\ufffc\057\ufffc\061\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\071\ufffc\072\ufffc\076\ufffc" +
    "\001\002\000\014\004\153\005\161\006\157\007\154\010" +
    "\156\001\002\000\004\024\215\001\002\000\004\043\216" +
    "\001\002\000\004\047\217\001\002\000\004\073\220\001" +
    "\002\000\004\072\221\001\002\000\004\050\222\001\002" +
    "\000\004\051\223\001\002\000\004\046\uffa3\001\002\000" +
    "\024\013\064\030\073\034\066\035\063\036\067\037\070" +
    "\040\076\043\075\050\065\001\002\000\042\012\116\013" +
    "\110\014\114\015\121\016\111\017\120\020\106\021\115" +
    "\022\112\023\123\024\117\025\113\031\105\032\124\033" +
    "\107\051\226\001\002\000\004\055\227\001\002\000\042" +
    "\011\034\027\032\041\056\042\006\043\020\054\060\057" +
    "\024\061\015\063\045\064\014\065\057\066\012\067\027" +
    "\071\033\072\046\076\053\001\002\000\044\011\034\027" +
    "\032\041\056\042\006\043\020\054\060\056\231\057\024" +
    "\061\015\063\045\064\014\065\057\066\012\067\027\071" +
    "\033\072\046\076\053\001\002\000\046\002\uffb4\011\uffb4" +
    "\027\uffb4\041\uffb4\042\uffb4\043\uffb4\054\uffb4\056\uffb4\057" +
    "\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\071\uffb4\072\uffb4\076\uffb4\001\002\000\046\002\ufffd\011" +
    "\ufffd\027\ufffd\041\ufffd\042\ufffd\043\ufffd\054\ufffd\056\ufffd" +
    "\057\ufffd\061\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\071\ufffd\072\ufffd\076\ufffd\001\002\000\004\045\234" +
    "\001\002\000\016\004\153\005\161\006\157\007\154\010" +
    "\156\043\236\001\002\000\010\046\uffc8\047\252\052\253" +
    "\001\002\000\004\047\237\001\002\000\004\055\240\001" +
    "\002\000\004\043\242\001\002\000\006\044\245\056\246" +
    "\001\002\000\004\045\243\001\002\000\024\013\064\030" +
    "\073\034\066\035\063\036\067\037\070\040\076\043\075" +
    "\050\065\001\002\000\044\012\116\013\110\014\114\015" +
    "\121\016\111\017\120\020\106\021\115\022\112\023\123" +
    "\024\117\025\113\031\105\032\124\033\107\044\uff9b\056" +
    "\uff9b\001\002\000\004\043\247\001\002\000\004\046\uff99" +
    "\001\002\000\004\045\250\001\002\000\024\013\064\030" +
    "\073\034\066\035\063\036\067\037\070\040\076\043\075" +
    "\050\065\001\002\000\044\012\116\013\110\014\114\015" +
    "\121\016\111\017\120\020\106\021\115\022\112\023\123" +
    "\024\117\025\113\031\105\032\124\033\107\044\uff9a\056" +
    "\uff9a\001\002\000\024\013\064\030\073\034\066\035\063" +
    "\036\067\037\070\040\076\043\075\050\065\001\002\000" +
    "\004\053\254\001\002\000\006\047\255\052\256\001\002" +
    "\000\004\052\276\001\002\000\004\053\257\001\002\000" +
    "\004\047\260\001\002\000\004\052\261\001\002\000\004" +
    "\052\262\001\002\000\024\013\064\030\073\034\066\035" +
    "\063\036\067\037\070\040\076\043\075\050\065\001\002" +
    "\000\006\044\265\053\264\001\002\000\004\046\uffaa\001" +
    "\002\000\004\052\266\001\002\000\024\013\064\030\073" +
    "\034\066\035\063\036\067\037\070\040\076\043\075\050" +
    "\065\001\002\000\006\044\272\053\271\001\002\000\046" +
    "\012\116\013\110\014\114\015\121\016\111\017\120\020" +
    "\106\021\115\022\112\023\123\024\117\025\113\031\105" +
    "\032\124\033\107\044\uffaf\051\uffaf\053\uffaf\001\002\000" +
    "\006\044\uffac\053\uffac\001\002\000\024\013\064\030\073" +
    "\034\066\035\063\036\067\037\070\040\076\043\075\050" +
    "\065\001\002\000\046\012\116\013\110\014\114\015\121" +
    "\016\111\017\120\020\106\021\115\022\112\023\123\024" +
    "\117\025\113\031\105\032\124\033\107\044\uffae\051\uffae" +
    "\053\uffae\001\002\000\006\044\272\053\275\001\002\000" +
    "\006\044\uffad\053\uffad\001\002\000\024\013\064\030\073" +
    "\034\066\035\063\036\067\037\070\040\076\043\075\050" +
    "\065\001\002\000\006\044\272\053\300\001\002\000\004" +
    "\046\uffab\001\002\000\042\012\116\013\110\014\114\015" +
    "\121\016\111\017\120\020\106\021\115\022\112\023\123" +
    "\024\117\025\113\031\105\032\124\033\107\046\uffc7\001" +
    "\002\000\004\050\303\001\002\000\016\004\153\005\161" +
    "\006\157\007\154\010\156\051\305\001\002\000\004\043" +
    "\321\001\002\000\004\055\316\001\002\000\006\044\307" +
    "\051\310\001\002\000\014\004\153\005\161\006\157\007" +
    "\154\010\156\001\002\000\004\055\311\001\002\000\042" +
    "\011\034\027\032\041\056\042\006\043\020\054\060\057" +
    "\024\061\015\063\045\064\014\065\057\066\012\067\027" +
    "\071\033\072\046\076\053\001\002\000\044\011\034\027" +
    "\032\041\056\042\006\043\020\054\060\056\313\057\024" +
    "\061\015\063\045\064\014\065\057\066\012\067\027\071" +
    "\033\072\046\076\053\001\002\000\046\002\uff92\011\uff92" +
    "\027\uff92\041\uff92\042\uff92\043\uff92\054\uff92\056\uff92\057" +
    "\uff92\061\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92" +
    "\071\uff92\072\uff92\076\uff92\001\002\000\004\043\315\001" +
    "\002\000\006\044\uff93\051\uff93\001\002\000\042\011\034" +
    "\027\032\041\056\042\006\043\020\054\060\057\024\061" +
    "\015\063\045\064\014\065\057\066\012\067\027\071\033" +
    "\072\046\076\053\001\002\000\044\011\034\027\032\041" +
    "\056\042\006\043\020\054\060\056\320\057\024\061\015" +
    "\063\045\064\014\065\057\066\012\067\027\071\033\072" +
    "\046\076\053\001\002\000\046\002\uff91\011\uff91\027\uff91" +
    "\041\uff91\042\uff91\043\uff91\054\uff91\056\uff91\057\uff91\061" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\071\uff91" +
    "\072\uff91\076\uff91\001\002\000\006\044\uff94\051\uff94\001" +
    "\002\000\004\050\323\001\002\000\026\013\064\030\073" +
    "\034\066\035\063\036\067\037\070\040\076\043\075\050" +
    "\065\051\325\001\002\000\006\044\272\051\326\001\002" +
    "\000\004\046\uff90\001\002\000\004\046\uff8f\001\002\000" +
    "\046\002\ufff7\011\ufff7\027\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\054\ufff7\056\ufff7\057\ufff7\061\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\071\ufff7\072\ufff7\076\ufff7\001\002" +
    "\000\042\012\116\013\110\014\114\015\121\016\111\017" +
    "\120\020\106\021\115\022\112\023\123\024\117\025\113" +
    "\031\105\032\124\033\107\046\ufff1\001\002\000\024\013" +
    "\064\030\073\034\066\035\063\036\067\037\070\040\076" +
    "\043\075\050\065\001\002\000\042\012\116\013\110\014" +
    "\114\015\121\016\111\017\120\020\106\021\115\022\112" +
    "\023\123\024\117\025\113\031\105\032\124\033\107\051" +
    "\333\001\002\000\004\055\334\001\002\000\042\011\034" +
    "\027\032\041\056\042\006\043\020\054\060\057\024\061" +
    "\015\063\045\064\014\065\057\066\012\067\027\071\033" +
    "\072\046\076\053\001\002\000\044\011\034\027\032\041" +
    "\056\042\006\043\020\054\060\056\336\057\024\061\015" +
    "\063\045\064\014\065\057\066\012\067\027\071\033\072" +
    "\046\076\053\001\002\000\050\002\uffbe\011\uffbe\027\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\054\uffbe\056\uffbe\057\uffbe\060" +
    "\337\061\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe" +
    "\071\uffbe\072\uffbe\076\uffbe\001\002\000\006\055\341\057" +
    "\024\001\002\000\046\002\uffbf\011\uffbf\027\uffbf\041\uffbf" +
    "\042\uffbf\043\uffbf\054\uffbf\056\uffbf\057\uffbf\061\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\071\uffbf\072\uffbf" +
    "\076\uffbf\001\002\000\042\011\034\027\032\041\056\042" +
    "\006\043\020\054\060\057\024\061\015\063\045\064\014" +
    "\065\057\066\012\067\027\071\033\072\046\076\053\001" +
    "\002\000\044\011\034\027\032\041\056\042\006\043\020" +
    "\054\060\056\343\057\024\061\015\063\045\064\014\065" +
    "\057\066\012\067\027\071\033\072\046\076\053\001\002" +
    "\000\046\002\uffc0\011\uffc0\027\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\054\uffc0\056\uffc0\057\uffc0\061\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\067\uffc0\071\uffc0\072\uffc0\076\uffc0\001" +
    "\002\000\046\002\ufff6\011\ufff6\027\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\054\ufff6\056\ufff6\057\ufff6\061\ufff6\063\ufff6\064" +
    "\ufff6\065\ufff6\066\ufff6\067\ufff6\071\ufff6\072\ufff6\076\ufff6" +
    "\001\002\000\046\002\ufff8\011\ufff8\027\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\054\ufff8\056\ufff8\057\ufff8\061\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\071\ufff8\072\ufff8\076" +
    "\ufff8\001\002\000\046\002\ufff5\011\ufff5\027\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\054\ufff5\056\ufff5\057\ufff5\061\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\071\ufff5\072\ufff5" +
    "\076\ufff5\001\002\000\004\012\376\001\002\000\024\013" +
    "\064\030\073\034\066\035\063\036\067\037\070\040\076" +
    "\043\075\050\065\001\002\000\024\013\064\030\073\034" +
    "\066\035\063\036\067\037\070\040\076\043\075\050\065" +
    "\001\002\000\004\013\363\001\002\000\006\043\354\074" +
    "\355\001\002\000\004\047\361\001\002\000\004\050\356" +
    "\001\002\000\024\013\064\030\073\034\066\035\063\036" +
    "\067\037\070\040\076\043\075\050\065\001\002\000\042" +
    "\012\116\013\110\014\114\015\121\016\111\017\120\020" +
    "\106\021\115\022\112\023\123\024\117\025\113\031\105" +
    "\032\124\033\107\051\360\001\002\000\004\046\uffa2\001" +
    "\002\000\024\013\064\030\073\034\066\035\063\036\067" +
    "\037\070\040\076\043\075\050\065\001\002\000\042\012" +
    "\116\013\110\014\114\015\121\016\111\017\120\020\106" +
    "\021\115\022\112\023\123\024\117\025\113\031\105\032" +
    "\124\033\107\046\uff98\001\002\000\006\046\uffc3\051\uffc3" +
    "\001\002\000\042\012\116\013\110\014\114\015\121\016" +
    "\111\017\120\020\106\021\115\022\112\023\123\024\117" +
    "\025\113\031\105\032\124\033\107\053\365\001\002\000" +
    "\006\047\366\052\367\001\002\000\024\013\064\030\073" +
    "\034\066\035\063\036\067\037\070\040\076\043\075\050" +
    "\065\001\002\000\024\013\064\030\073\034\066\035\063" +
    "\036\067\037\070\040\076\043\075\050\065\001\002\000" +
    "\042\012\116\013\110\014\114\015\121\016\111\017\120" +
    "\020\106\021\115\022\112\023\123\024\117\025\113\031" +
    "\105\032\124\033\107\053\371\001\002\000\004\047\372" +
    "\001\002\000\024\013\064\030\073\034\066\035\063\036" +
    "\067\037\070\040\076\043\075\050\065\001\002\000\042" +
    "\012\116\013\110\014\114\015\121\016\111\017\120\020" +
    "\106\021\115\022\112\023\123\024\117\025\113\031\105" +
    "\032\124\033\107\046\uffa8\001\002\000\042\012\116\013" +
    "\110\014\114\015\121\016\111\017\120\020\106\021\115" +
    "\022\112\023\123\024\117\025\113\031\105\032\124\033" +
    "\107\046\uffa9\001\002\000\044\012\116\013\110\014\114" +
    "\015\121\016\111\017\120\020\106\021\115\022\112\023" +
    "\123\024\117\025\113\031\105\032\124\033\107\046\uffc6" +
    "\051\uffc6\001\002\000\006\046\uffc4\051\uffc4\001\002\000" +
    "\004\002\001\001\002\000\042\012\116\013\110\014\114" +
    "\015\121\016\111\017\120\020\106\021\115\022\112\023" +
    "\123\024\117\025\113\031\105\032\124\033\107\055\u0101" +
    "\001\002\000\026\013\064\030\073\034\066\035\063\036" +
    "\067\037\070\040\076\043\075\050\065\062\u0104\001\002" +
    "\000\004\047\u0109\001\002\000\030\013\064\030\073\034" +
    "\066\035\063\036\067\037\070\040\076\043\075\050\065" +
    "\056\u0107\062\u0104\001\002\000\004\047\uffbc\001\002\000" +
    "\030\013\uffba\030\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\043\uffba\050\uffba\056\uffba\062\uffba\001\002\000" +
    "\042\012\116\013\110\014\114\015\121\016\111\017\120" +
    "\020\106\021\115\022\112\023\123\024\117\025\113\031" +
    "\105\032\124\033\107\047\uffbd\001\002\000\046\002\uffb8" +
    "\011\uffb8\027\uffb8\041\uffb8\042\uffb8\043\uffb8\054\uffb8\056" +
    "\uffb8\057\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8" +
    "\067\uffb8\071\uffb8\072\uffb8\076\uffb8\001\002\000\030\013" +
    "\uffb9\030\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\043\uffb9\050\uffb9\056\uffb9\062\uffb9\001\002\000\004\024" +
    "\u010a\001\002\000\004\055\u010b\001\002\000\042\011\034" +
    "\027\032\041\056\042\006\043\020\054\060\057\024\061" +
    "\015\063\045\064\014\065\057\066\012\067\027\071\033" +
    "\072\046\076\053\001\002\000\044\011\034\027\032\041" +
    "\056\042\006\043\020\054\060\056\u010d\057\024\061\015" +
    "\063\045\064\014\065\057\066\012\067\027\071\033\072" +
    "\046\076\053\001\002\000\030\013\uffbb\030\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb\050\uffbb\056" +
    "\uffbb\062\uffbb\001\002\000\004\043\u010f\001\002\000\004" +
    "\047\350\001\002\000\004\046\u0111\001\002\000\024\013" +
    "\064\030\073\034\066\035\063\036\067\037\070\040\076" +
    "\043\075\050\065\001\002\000\042\012\116\013\110\014" +
    "\114\015\121\016\111\017\120\020\106\021\115\022\112" +
    "\023\123\024\117\025\113\031\105\032\124\033\107\046" +
    "\u0113\001\002\000\004\043\u0115\001\002\000\004\051\u0118" +
    "\001\002\000\010\012\347\013\352\047\350\001\002\000" +
    "\004\051\uffb3\001\002\000\004\051\uffb2\001\002\000\004" +
    "\055\u0119\001\002\000\042\011\034\027\032\041\056\042" +
    "\006\043\020\054\060\057\024\061\015\063\045\064\014" +
    "\065\057\066\012\067\027\071\033\072\046\076\053\001" +
    "\002\000\044\011\034\027\032\041\056\042\006\043\020" +
    "\054\060\056\u011b\057\024\061\015\063\045\064\014\065" +
    "\057\066\012\067\027\071\033\072\046\076\053\001\002" +
    "\000\046\002\uffb1\011\uffb1\027\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\054\uffb1\056\uffb1\057\uffb1\061\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\uffb1\067\uffb1\071\uffb1\072\uffb1\076\uffb1\001" +
    "\002\000\046\002\uffb5\011\uffb5\027\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\054\uffb5\056\uffb5\057\uffb5\061\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\067\uffb5\071\uffb5\072\uffb5\076\uffb5" +
    "\001\002\000\046\002\ufffb\011\ufffb\027\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\054\ufffb\056\ufffb\057\ufffb\061\ufffb\063\ufffb" +
    "\064\ufffb\065\ufffb\066\ufffb\067\ufffb\071\ufffb\072\ufffb\076" +
    "\ufffb\001\002\000\046\002\ufff3\011\ufff3\027\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\054\ufff3\056\ufff3\057\ufff3\061\ufff3\063" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\071\ufff3\072\ufff3" +
    "\076\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\076\002\015\003\006\006\035\014\027\021" +
    "\024\022\050\023\043\024\016\025\040\026\051\027\034" +
    "\030\007\031\053\032\046\033\060\034\054\035\010\036" +
    "\037\037\021\040\025\041\030\043\022\044\004\045\042" +
    "\046\020\047\036\050\047\051\041\053\012\054\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\006\035\014\027\021\170\022\050\023\043\024" +
    "\016\025\040\026\051\027\034\030\007\031\053\032\046" +
    "\033\060\034\054\035\010\036\037\037\021\040\025\041" +
    "\030\043\022\044\004\045\042\046\020\047\036\050\047" +
    "\051\041\053\012\054\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\377\017\070\020\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\327" +
    "\017\070\020\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\073\017\070\020" +
    "\071\001\001\000\002\001\001\000\010\015\164\017\070" +
    "\020\071\001\001\000\012\015\157\017\070\020\071\055" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\151\017\070\020\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\143\017\070\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\103\017\070\020\071\001\001\000" +
    "\002\001\001\000\010\015\142\017\070\020\071\001\001" +
    "\000\010\015\141\017\070\020\071\001\001\000\010\015" +
    "\140\017\070\020\071\001\001\000\010\015\137\017\070" +
    "\020\071\001\001\000\010\015\136\017\070\020\071\001" +
    "\001\000\010\015\135\017\070\020\071\001\001\000\010" +
    "\015\134\017\070\020\071\001\001\000\010\015\133\017" +
    "\070\020\071\001\001\000\010\015\132\017\070\020\071" +
    "\001\001\000\010\015\131\017\070\020\071\001\001\000" +
    "\010\015\130\017\070\020\071\001\001\000\010\015\127" +
    "\017\070\020\071\001\001\000\010\015\126\017\070\020" +
    "\071\001\001\000\002\001\001\000\010\015\125\017\070" +
    "\020\071\001\001\000\010\015\124\017\070\020\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\146\017\070\020\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\163\017\070\020\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\003\166\006\035\014\027\021\024\022" +
    "\050\023\043\024\016\025\040\026\051\027\034\030\007" +
    "\031\053\032\046\033\060\034\054\035\010\036\037\037" +
    "\021\040\025\041\030\043\022\044\004\045\042\046\020" +
    "\047\036\050\047\051\041\053\012\054\003\001\001\000" +
    "\072\006\035\014\027\021\170\022\050\023\043\024\016" +
    "\025\040\026\051\027\034\030\007\031\053\032\046\033" +
    "\060\034\054\035\010\036\037\037\021\040\025\041\030" +
    "\043\022\044\004\045\042\046\020\047\036\050\047\051" +
    "\041\053\012\054\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\173\017\070\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\224\017\070\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\003\227\006" +
    "\035\014\027\021\024\022\050\023\043\024\016\025\040" +
    "\026\051\027\034\030\007\031\053\032\046\033\060\034" +
    "\054\035\010\036\037\037\021\040\025\041\030\043\022" +
    "\044\004\045\042\046\020\047\036\050\047\051\041\053" +
    "\012\054\003\001\001\000\072\006\035\014\027\021\170" +
    "\022\050\023\043\024\016\025\040\026\051\027\034\030" +
    "\007\031\053\032\046\033\060\034\054\035\010\036\037" +
    "\037\021\040\025\041\030\043\022\044\004\045\042\046" +
    "\020\047\036\050\047\051\041\053\012\054\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\060\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\243\017\070\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\250\017\070\020\071" +
    "\001\001\000\002\001\001\000\010\015\300\017\070\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\262\001\001\000\012\004\273\015\267" +
    "\017\070\020\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\266\015\267\017\070" +
    "\020\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\272\017\070\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\276\015\267\017\070\020\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\303\061\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\313\001" +
    "\001\000\002\001\001\000\074\003\311\006\035\014\027" +
    "\021\024\022\050\023\043\024\016\025\040\026\051\027" +
    "\034\030\007\031\053\032\046\033\060\034\054\035\010" +
    "\036\037\037\021\040\025\041\030\043\022\044\004\045" +
    "\042\046\020\047\036\050\047\051\041\053\012\054\003" +
    "\001\001\000\072\006\035\014\027\021\170\022\050\023" +
    "\043\024\016\025\040\026\051\027\034\030\007\031\053" +
    "\032\046\033\060\034\054\035\010\036\037\037\021\040" +
    "\025\041\030\043\022\044\004\045\042\046\020\047\036" +
    "\050\047\051\041\053\012\054\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\003\316" +
    "\006\035\014\027\021\024\022\050\023\043\024\016\025" +
    "\040\026\051\027\034\030\007\031\053\032\046\033\060" +
    "\034\054\035\010\036\037\037\021\040\025\041\030\043" +
    "\022\044\004\045\042\046\020\047\036\050\047\051\041" +
    "\053\012\054\003\001\001\000\072\006\035\014\027\021" +
    "\170\022\050\023\043\024\016\025\040\026\051\027\034" +
    "\030\007\031\053\032\046\033\060\034\054\035\010\036" +
    "\037\037\021\040\025\041\030\043\022\044\004\045\042" +
    "\046\020\047\036\050\047\051\041\053\012\054\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\323\015\267\017\070\020\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\331\017\070\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\003\334\006\035\014\027\021\024\022\050\023\043\024" +
    "\016\025\040\026\051\027\034\030\007\031\053\032\046" +
    "\033\060\034\054\035\010\036\037\037\021\040\025\041" +
    "\030\043\022\044\004\045\042\046\020\047\036\050\047" +
    "\051\041\053\012\054\003\001\001\000\072\006\035\014" +
    "\027\021\170\022\050\023\043\024\016\025\040\026\051" +
    "\027\034\030\007\031\053\032\046\033\060\034\054\035" +
    "\010\036\037\037\021\040\025\041\030\043\022\044\004" +
    "\045\042\046\020\047\036\050\047\051\041\053\012\054" +
    "\003\001\001\000\002\001\001\000\004\032\337\001\001" +
    "\000\002\001\001\000\074\003\341\006\035\014\027\021" +
    "\024\022\050\023\043\024\016\025\040\026\051\027\034" +
    "\030\007\031\053\032\046\033\060\034\054\035\010\036" +
    "\037\037\021\040\025\041\030\043\022\044\004\045\042" +
    "\046\020\047\036\050\047\051\041\053\012\054\003\001" +
    "\001\000\072\006\035\014\027\021\170\022\050\023\043" +
    "\024\016\025\040\026\051\027\034\030\007\031\053\032" +
    "\046\033\060\034\054\035\010\036\037\037\021\040\025" +
    "\041\030\043\022\044\004\045\042\046\020\047\036\050" +
    "\047\051\041\053\012\054\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\374\017\070\020\071\001\001" +
    "\000\010\015\363\017\070\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\356\017\070\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\361\017\070\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\373\017\070\020\071" +
    "\001\001\000\010\015\367\017\070\020\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\372\017\070" +
    "\020\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\u0102\013\u0104\015\u0105\016\u0101\017" +
    "\070\020\071\001\001\000\002\001\001\000\014\013\u0107" +
    "\015\u0105\016\u0101\017\070\020\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\003\u010b\006\035\014\027\021\024\022\050\023\043" +
    "\024\016\025\040\026\051\027\034\030\007\031\053\032" +
    "\046\033\060\034\054\035\010\036\037\037\021\040\025" +
    "\041\030\043\022\044\004\045\042\046\020\047\036\050" +
    "\047\051\041\053\012\054\003\001\001\000\072\006\035" +
    "\014\027\021\170\022\050\023\043\024\016\025\040\026" +
    "\051\027\034\030\007\031\053\032\046\033\060\034\054" +
    "\035\010\036\037\037\021\040\025\041\030\043\022\044" +
    "\004\045\042\046\020\047\036\050\047\051\041\053\012" +
    "\054\003\001\001\000\002\001\001\000\004\026\u010f\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\u0111" +
    "\017\070\020\071\001\001\000\002\001\001\000\010\026" +
    "\u0116\030\u0115\042\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\003\u0119\006\035\014\027\021\024\022\050" +
    "\023\043\024\016\025\040\026\051\027\034\030\007\031" +
    "\053\032\046\033\060\034\054\035\010\036\037\037\021" +
    "\040\025\041\030\043\022\044\004\045\042\046\020\047" +
    "\036\050\047\051\041\053\012\054\003\001\001\000\072" +
    "\006\035\014\027\021\170\022\050\023\043\024\016\025" +
    "\040\026\051\027\034\030\007\031\053\032\046\033\060" +
    "\034\054\035\010\036\037\037\021\040\025\041\030\043" +
    "\022\044\004\045\042\046\020\047\036\050\047\051\041" +
    "\053\012\054\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> Ejecutar;
    public LinkedList<LinkedList<Instruccion>> CasesList =  new LinkedList<>();
    public LinkedList<Expresion> Caso =  new LinkedList<>();
    
    public String resultado = ""; 


    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errors error = new Errors("Sintáctico","Se esperaba este "+s.value,s.right, s.left);
            TextEditor.Errores.add(error);

            TextEditor.Print+="Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado"+"\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Errors error = new Errors("Sintáctico","Se esperaba este "+ s.value,s.right, s.left);
            TextEditor.Errores.add(error);
            TextEditor.Print+="Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion."+"\n";
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Ejecutar = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= Variables P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Func_Print P_Coma 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion p = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= Incremento_Decremento P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= Sen_Control 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= Sen_Ciclicas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= Sen_Transferencia P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= Vectores P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= Listas P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= Structs P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= Métodos 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= Start_With P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sen_Return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Return",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sen_Return ::= RETURN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Return",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sen_Transferencia ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sen_Transferencia ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sen_Transferencia ::= Sen_Return 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negacion("ERROR","ERROR",e,eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"+",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"-",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"*",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"/",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"**",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"%",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= P_ABRE EXPRESION P_CIERRA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;/*e.interpretar(null); RESULT=new Dato(e.getValor(),e.getTipo(), eright, eleft);*/ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= ENTERO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"INT", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= DECIMAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"DOUBLE", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= BOOLEAN 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"BOOL", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= CAR 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"CHAR", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= CAD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"STRING", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= P_ABRE Tipos_Dato P_CIERRA EXPRESION 
            {
              Expresion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Casteo(tipo,e,eright, eleft);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccederVariables(id,idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= AccederVectores 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION COMPARACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"==",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION DIFERENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"!=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"<=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,">=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"<",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,">",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= NOT EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not("true","BOOL",e,eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"&&",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"||",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"^",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= Remove_Valores_Listas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= IDENTIFICADOR Punto IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new AccederStruct(id,att,idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipos_Dato ::= INT 
            {
              String RESULT =null;
		 RESULT="INT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipos_Dato ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT="DOUBLE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipos_Dato ::= BOOL 
            {
              String RESULT =null;
		 RESULT="BOOL"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipos_Dato ::= CHAR 
            {
              String RESULT =null;
		 RESULT="CHAR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipos_Dato ::= STRING 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Mutabilidad ::= VAR 
            {
              String RESULT =null;
		 RESULT = "VAR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mutabilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Mutabilidad ::= CONST 
            {
              String RESULT =null;
		 RESULT = "CONST"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mutabilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Variables ::= Dec_Variables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variables",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Variables ::= Asignar_Valor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variables",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Dec_Variables ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new Declarar(null,ty,id,m,tyright, tyleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Variables",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Dec_Variables ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new Declarar(e,ty,id,m,tyright, tyleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Variables",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Asignar_Valor ::= IDENTIFICADOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignar(e,i,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Valor",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Func_Print ::= PRINT P_ABRE EXPRESION P_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =new Print(a,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Func_Print",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Incremento_Decremento ::= IDENTIFICADOR MAS MAS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IncrementoDecremento(id,"++",idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento_Decremento",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Incremento_Decremento ::= IDENTIFICADOR MENOS MENOS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IncrementoDecremento(id,"--",idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento_Decremento",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Sen_Control ::= Sen_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Control",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Sen_Control ::= Sen_Match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Control",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Sen_IF ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i2 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new IF(e,i,i2,null,eright,eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Sen_IF ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C ELSE Sen_IF 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion i2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IF(e,i,null,i2,eright,eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Sen_IF ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new IF(e,i,null,null,eright,eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Entry_Cases ::= EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Entry_Cases",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Entry_Cases ::= DEFAULT 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(a,"STRING", aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Entry_Cases",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Cases ::= Entry_Cases IGUAL MAYOR LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 CasesList.add(i); Caso.add(a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cases",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Strcuct_Match ::= Cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Strcuct_Match",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Strcuct_Match ::= Strcuct_Match Cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Strcuct_Match",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Sen_Match ::= MATCH EXPRESION LLAVE_A Strcuct_Match LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Match(CasesList, Caso, e, eright, eleft);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Match",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Sen_Ciclicas ::= Sen_While 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Sen_Ciclicas ::= Sen_For 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Sen_Ciclicas ::= Sen_Do_While P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Sen_While ::= WHILE P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(c,i,"While",cright, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_While",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Tipo_Incremento ::= Incremento_Decremento 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo_Incremento",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Tipo_Incremento ::= Asignar_Valor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo_Incremento",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Sen_For ::= FOR P_ABRE Asignar_Valor P_Coma EXPRESION P_Coma Tipo_Incremento P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i,a,e,in,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_For",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Sen_Do_While ::= DO LLAVE_A instrucciones LLAVE_C WHILE P_ABRE EXPRESION P_CIERRA 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(c,i,"Do",cright, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Do_While",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Datos_Una_Dimension ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Una_Dimension",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Datos_Una_Dimension ::= Datos_Una_Dimension Coma EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Una_Dimension",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Datos_Dos_Dimension ::= C_ABRE Datos_Una_Dimension C_CIERRA 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Dos_Dimension",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Datos_Dos_Dimension ::= Datos_Dos_Dimension Coma C_ABRE Datos_Una_Dimension C_CIERRA 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Expresion>> a = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Dos_Dimension",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Dec_Vectores ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato C_ABRE C_CIERRA IGUAL C_ABRE Datos_Una_Dimension C_CIERRA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> v1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vectores(v1,null,t,i,m,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Vectores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Dec_Vectores ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato C_ABRE C_CIERRA C_ABRE C_CIERRA IGUAL C_ABRE Datos_Dos_Dimension C_CIERRA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<LinkedList<Expresion>> v2 = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vectores(null,v2,t,i,m,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Vectores",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Asignar_Valor_Vectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignar_Vectores(e,i,x,x,"Vector1",0,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Valor_Vectores",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Asignar_Valor_Vectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA C_ABRE EXPRESION C_CIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion y = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignar_Vectores(e,i,x,y,"Vector2",0,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Valor_Vectores",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Vectores ::= Dec_Vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vectores",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Vectores ::= Asignar_Valor_Vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vectores",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AccederVectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccederVectList(i,x,x,"Vector1",iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccederVectores",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AccederVectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA C_ABRE EXPRESION C_CIERRA 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion y = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccederVectList(i,x,y,"Vector2",iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccederVectores",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Declaracion_Listas ::= LIST MENOR Tipos_Dato MAYOR IDENTIFICADOR IGUAL NEW LIST P_ABRE P_CIERRA 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 RESULT = new Listas(new LinkedList<>(),t,i,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Listas",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Agregar_Lista ::= IDENTIFICADOR Punto APPEND P_ABRE EXPRESION P_CIERRA 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Append(e,i,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Agregar_Lista",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Remove_Valores_Listas ::= IDENTIFICADOR Punto REMOVE P_ABRE EXPRESION P_CIERRA 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove_Valor(e,id,idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Remove_Valores_Listas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Listas ::= Declaracion_Listas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Listas",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Listas ::= Agregar_Lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Listas",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Lista_Structs ::= IDENTIFICADOR Dos_Puntos Tipos_Dato P_Coma 
            {
              LinkedList<Atributo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Atributo(i,t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Structs",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Lista_Structs ::= Lista_Structs IDENTIFICADOR Dos_Puntos Tipos_Dato P_Coma 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(new Atributo(i,t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Structs",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Dec_Structs ::= STRUCT LLAVE_A Lista_Structs LLAVE_C IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Atributo> att = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Structs(i,att,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Structs",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Nombre_Struct ::= IDENTIFICADOR Dos_Puntos EXPRESION 
            {
              LinkedList<Def_Atributo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>();  RESULT.add(new Def_Atributo(i,e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Nombre_Struct",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Nombre_Struct ::= Nombre_Struct Coma IDENTIFICADOR Dos_Puntos EXPRESION 
            {
              LinkedList<Def_Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Def_Atributo> a = (LinkedList<Def_Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(new Def_Atributo(i,e)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Nombre_Struct",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Instancia_Struct ::= Mutabilidad IDENTIFICADOR Dos_Puntos IDENTIFICADOR IGUAL LLAVE_A Nombre_Struct LLAVE_C 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int Tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int Tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String Ts = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ADleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ADright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Def_Atributo> AD = (LinkedList<Def_Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Instanciar_Struct(m,id,Ts,AD,idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instancia_Struct",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Asignar_Struct ::= IDENTIFICADOR Punto IDENTIFICADOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignarStructs(i,att,e,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Struct",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Structs ::= Dec_Structs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Structs",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Structs ::= Instancia_Struct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Structs",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Structs ::= Asignar_Struct 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Structs",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Parámetros ::= Tipos_Dato IDENTIFICADOR 
            {
              LinkedList<Atributo> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new Atributo(i,t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parámetros",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Parámetros ::= Parámetros Coma Tipos_Dato IDENTIFICADOR 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(new Atributo(i,t)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parámetros",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Métodos ::= VOID IDENTIFICADOR P_ABRE Parámetros P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Atributo> p = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> in = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodos(i,p,in,iright, ileft);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Métodos",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Métodos ::= VOID IDENTIFICADOR P_ABRE P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> in = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Metodos(i,new LinkedList<>(),in,iright, ileft);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Métodos",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Start_With ::= START IDENTIFICADOR P_ABRE P_CIERRA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Start_With(new LinkedList<>(),id, idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start_With",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Start_With ::= START IDENTIFICADOR P_ABRE Datos_Una_Dimension P_CIERRA 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> dd = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Start_With(dd,id, idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Start_With",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

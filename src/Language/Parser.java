
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.LinkedList;
import Interpreter.Expresiones.*;
import Interpreter.Instrucciones.*;
import Interpreter.Funciones.*;
import Interpreter.Instruccion;
import Interpreter.Expresion;
import client.Errors;
import client.TextEditor;
import Interpreter.Entornos.Atributo;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\022\004\000\002\022\004" +
    "\000\002\022\004\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\014\003\000\002\014\004\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\006" +
    "\000\002\016\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\006\003\000\002" +
    "\006\003\000\002\026\003\000\002\026\003\000\002\024" +
    "\006\000\002\024\010\000\002\027\005\000\002\023\006" +
    "\000\002\031\005\000\002\031\005\000\002\032\003\000" +
    "\002\032\003\000\002\033\015\000\002\033\013\000\002" +
    "\033\011\000\002\017\003\000\002\017\003\000\002\013" +
    "\010\000\002\012\003\000\002\012\004\000\002\041\007" +
    "\000\002\035\003\000\002\035\003\000\002\035\004\000" +
    "\002\034\011\000\002\043\003\000\002\043\003\000\002" +
    "\037\015\000\002\036\012\000\002\004\003\000\002\004" +
    "\005\000\002\005\005\000\002\005\007\000\002\025\014" +
    "\000\002\025\016\000\002\030\010\000\002\030\013\000" +
    "\002\042\003\000\002\042\003\000\002\020\006\000\002" +
    "\020\011\000\002\045\014\000\002\046\010\000\002\021" +
    "\010\000\002\044\003\000\002\044\003\000\002\054\006" +
    "\000\002\054\007\000\002\050\007\000\002\015\005\000" +
    "\002\015\007\000\002\051\012\000\002\047\003\000\002" +
    "\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\036\037\051\040\005\041\015\052\052\055" +
    "\022\057\013\061\040\062\012\063\053\064\011\065\025" +
    "\067\030\070\041\074\046\001\002\000\004\044\uffa3\001" +
    "\002\000\004\041\uffce\001\002\000\040\002\000\037\051" +
    "\040\005\041\015\052\052\055\022\057\013\061\040\062" +
    "\012\063\053\064\011\065\025\067\030\070\041\074\046" +
    "\001\002\000\004\044\377\001\002\000\004\044\376\001" +
    "\002\000\004\044\ufff1\001\002\000\004\046\360\001\002" +
    "\000\024\012\064\026\073\032\066\033\063\034\067\035" +
    "\070\036\076\041\075\046\065\001\002\000\004\002\341" +
    "\001\002\000\014\011\314\012\317\045\315\050\316\073" +
    "\320\001\002\000\004\044\uffaa\001\002\000\004\044\313" +
    "\001\002\000\004\044\312\001\002\000\004\044\311\001" +
    "\002\000\004\046\276\001\002\000\042\002\uffff\037\uffff" +
    "\040\uffff\041\uffff\052\uffff\054\uffff\055\uffff\057\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\067\uffff\070\uffff" +
    "\074\uffff\001\002\000\042\002\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\052\uffc4\054\uffc4\055\uffc4\057\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\067\uffc4\070\uffc4\074\uffc4\001" +
    "\002\000\026\012\064\026\073\032\066\033\063\034\067" +
    "\035\070\036\076\041\075\044\ufff4\046\065\001\002\000" +
    "\004\044\ufff0\001\002\000\004\044\274\001\002\000\004" +
    "\044\ufff2\001\002\000\004\044\uffa9\001\002\000\004\041" +
    "\225\001\002\000\004\044\uff9b\001\002\000\042\002\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\052\uffb9\054\uffb9\055\uffb9\057" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\067\uffb9" +
    "\070\uffb9\074\uffb9\001\002\000\004\044\224\001\002\000" +
    "\004\044\uffa2\001\002\000\004\044\uffcd\001\002\000\004" +
    "\046\216\001\002\000\004\021\205\001\002\000\042\002" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\052\uffc5\054\uffc5\055\uffc5" +
    "\057\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\067" +
    "\uffc5\070\uffc5\074\uffc5\001\002\000\004\044\uff9a\001\002" +
    "\000\004\044\204\001\002\000\004\044\uffcc\001\002\000" +
    "\004\053\170\001\002\000\042\002\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\052\ufffa\054\ufffa\055\ufffa\057\ufffa\061\ufffa\062" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\067\ufffa\070\ufffa\074\ufffa" +
    "\001\002\000\042\002\ufff9\037\ufff9\040\ufff9\041\ufff9\052" +
    "\ufff9\054\ufff9\055\ufff9\057\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\067\ufff9\070\ufff9\074\ufff9\001\002\000" +
    "\004\041\uffcf\001\002\000\004\046\165\001\002\000\004" +
    "\053\055\001\002\000\042\002\uffba\037\uffba\040\uffba\041" +
    "\uffba\052\uffba\054\uffba\055\uffba\057\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\067\uffba\070\uffba\074\uffba\001" +
    "\002\000\036\037\051\040\005\041\015\052\052\055\022" +
    "\057\013\061\040\062\012\063\053\064\011\065\025\067" +
    "\030\070\041\074\046\001\002\000\040\037\051\040\005" +
    "\041\015\052\052\054\057\055\022\057\013\061\040\062" +
    "\012\063\053\064\011\065\025\067\030\070\041\074\046" +
    "\001\002\000\004\061\061\001\002\000\042\002\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\052\ufffe\054\ufffe\055\ufffe\057\ufffe" +
    "\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\067\ufffe\070" +
    "\ufffe\074\ufffe\001\002\000\004\046\062\001\002\000\024" +
    "\012\064\026\073\032\066\033\063\034\067\035\070\036" +
    "\076\041\075\046\065\001\002\000\056\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\042\uffe6\044\uffe6\045\uffe6\047\uffe6\051\uffe6\053\uffe6\054" +
    "\uffe6\001\002\000\024\012\064\026\073\032\066\033\063" +
    "\034\067\035\070\036\076\041\075\046\065\001\002\000" +
    "\036\004\152\005\160\006\156\007\153\010\155\012\064" +
    "\026\073\032\066\033\063\034\067\035\070\036\076\041" +
    "\075\046\065\001\002\000\056\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\027\uffe7\030\uffe7\031\uffe7\042\uffe7" +
    "\044\uffe7\045\uffe7\047\uffe7\051\uffe7\053\uffe7\054\uffe7\001" +
    "\002\000\056\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\042\uffe5\044\uffe5\045\uffe5" +
    "\047\uffe5\051\uffe5\053\uffe5\054\uffe5\001\002\000\056\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\042\uffe4\044\uffe4\045\uffe4\047\uffe4\051\uffe4" +
    "\053\uffe4\054\uffe4\001\002\000\056\011\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\027\uffe0\030\uffe0\031\uffe0\042" +
    "\uffe0\044\uffe0\045\uffe0\047\uffe0\051\uffe0\053\uffe0\054\uffe0" +
    "\001\002\000\056\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\027\uffd5\030\uffd5\031\uffd5\042\uffd5\044\uffd5\045" +
    "\uffd5\047\uffd5\051\uffd5\053\uffd5\054\uffd5\001\002\000\024" +
    "\012\064\026\073\032\066\033\063\034\067\035\070\036" +
    "\076\041\075\046\065\001\002\000\042\011\115\012\107" +
    "\013\113\014\120\015\110\016\117\017\105\020\114\021" +
    "\111\022\123\023\116\024\112\027\104\030\122\031\106" +
    "\047\150\001\002\000\062\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\027\uffe1\030\uffe1\031\uffe1\042\uffe1\044" +
    "\uffe1\045\uffe1\047\uffe1\050\077\051\uffe1\053\uffe1\054\uffe1" +
    "\073\100\001\002\000\056\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\027\uffe3\030\uffe3\031\uffe3\042\uffe3\044" +
    "\uffe3\045\uffe3\047\uffe3\051\uffe3\053\uffe3\054\uffe3\001\002" +
    "\000\024\012\064\026\073\032\066\033\063\034\067\035" +
    "\070\036\076\041\075\046\065\001\002\000\004\025\101" +
    "\001\002\000\004\046\102\001\002\000\024\012\064\026" +
    "\073\032\066\033\063\034\067\035\070\036\076\041\075" +
    "\046\065\001\002\000\042\011\115\012\107\013\113\014" +
    "\120\015\110\016\117\017\105\020\114\021\111\022\123" +
    "\023\116\024\112\027\104\030\122\031\106\047\121\001" +
    "\002\000\024\012\064\026\073\032\066\033\063\034\067" +
    "\035\070\036\076\041\075\046\065\001\002\000\024\012" +
    "\064\026\073\032\066\033\063\034\067\035\070\036\076" +
    "\041\075\046\065\001\002\000\024\012\064\026\073\032" +
    "\066\033\063\034\067\035\070\036\076\041\075\046\065" +
    "\001\002\000\024\012\064\026\073\032\066\033\063\034" +
    "\067\035\070\036\076\041\075\046\065\001\002\000\024" +
    "\012\064\026\073\032\066\033\063\034\067\035\070\036" +
    "\076\041\075\046\065\001\002\000\024\012\064\026\073" +
    "\032\066\033\063\034\067\035\070\036\076\041\075\046" +
    "\065\001\002\000\024\012\064\026\073\032\066\033\063" +
    "\034\067\035\070\036\076\041\075\046\065\001\002\000" +
    "\024\012\064\026\073\032\066\033\063\034\067\035\070" +
    "\036\076\041\075\046\065\001\002\000\024\012\064\026" +
    "\073\032\066\033\063\034\067\035\070\036\076\041\075" +
    "\046\065\001\002\000\024\012\064\026\073\032\066\033" +
    "\063\034\067\035\070\036\076\041\075\046\065\001\002" +
    "\000\024\012\064\026\073\032\066\033\063\034\067\035" +
    "\070\036\076\041\075\046\065\001\002\000\024\012\064" +
    "\026\073\032\066\033\063\034\067\035\070\036\076\041" +
    "\075\046\065\001\002\000\024\012\064\026\073\032\066" +
    "\033\063\034\067\035\070\036\076\041\075\046\065\001" +
    "\002\000\056\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\042\uffa4\044\uffa4\045\uffa4" +
    "\047\uffa4\051\uffa4\053\uffa4\054\uffa4\001\002\000\024\012" +
    "\064\026\073\032\066\033\063\034\067\035\070\036\076" +
    "\041\075\046\065\001\002\000\024\012\064\026\073\032" +
    "\066\033\063\034\067\035\070\036\076\041\075\046\065" +
    "\001\002\000\056\011\115\012\107\013\113\014\120\015" +
    "\110\016\117\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\027\uffdd\030\uffdd\031\uffdd\042\uffdd\044\uffdd\045" +
    "\uffdd\047\uffdd\051\uffdd\053\uffdd\054\uffdd\001\002\000\056" +
    "\011\115\012\107\013\113\014\120\015\110\016\117\017" +
    "\105\020\114\021\111\022\123\023\116\024\112\027\104" +
    "\030\uffd7\031\106\042\uffd7\044\uffd7\045\uffd7\047\uffd7\051" +
    "\uffd7\053\uffd7\054\uffd7\001\002\000\056\011\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\110\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\042\uffeb\044\uffeb\045\uffeb\047\uffeb\051\uffeb\053\uffeb\054" +
    "\uffeb\001\002\000\056\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\015\110\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\027\uffe9\030\uffe9\031\uffe9\042\uffe9\044\uffe9" +
    "\045\uffe9\047\uffe9\051\uffe9\053\uffe9\054\uffe9\001\002\000" +
    "\056\011\115\012\107\013\113\014\120\015\110\016\117" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\027" +
    "\uffda\030\uffda\031\uffda\042\uffda\044\uffda\045\uffda\047\uffda" +
    "\051\uffda\053\uffda\054\uffda\001\002\000\056\011\uffee\012" +
    "\uffee\013\113\014\120\015\110\016\117\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\024\uffee\027\uffee\030\uffee\031" +
    "\uffee\042\uffee\044\uffee\045\uffee\047\uffee\051\uffee\053\uffee" +
    "\054\uffee\001\002\000\056\011\115\012\107\013\113\014" +
    "\120\015\110\016\117\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\027\uffde\030\uffde\031\uffde\042\uffde\044" +
    "\uffde\045\uffde\047\uffde\051\uffde\053\uffde\054\uffde\001\002" +
    "\000\056\011\uffec\012\uffec\013\uffec\014\uffec\015\110\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\027\uffec\030\uffec\031\uffec\042\uffec\044\uffec\045\uffec\047" +
    "\uffec\051\uffec\053\uffec\054\uffec\001\002\000\056\011\115" +
    "\012\107\013\113\014\120\015\110\016\117\017\uffdc\020" +
    "\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\042\uffdc\044\uffdc\045\uffdc\047\uffdc\051\uffdc\053" +
    "\uffdc\054\uffdc\001\002\000\056\011\115\012\107\013\113" +
    "\014\120\015\110\016\117\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\042\uffdb" +
    "\044\uffdb\045\uffdb\047\uffdb\051\uffdb\053\uffdb\054\uffdb\001" +
    "\002\000\054\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\027" +
    "\uffea\030\uffea\031\uffea\042\uffea\044\uffea\045\uffea\047\uffea" +
    "\051\uffea\053\uffea\054\uffea\001\002\000\056\011\uffed\012" +
    "\uffed\013\113\014\120\015\110\016\117\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\027\uffed\030\uffed\031" +
    "\uffed\042\uffed\044\uffed\045\uffed\047\uffed\051\uffed\053\uffed" +
    "\054\uffed\001\002\000\056\011\115\012\107\013\113\014" +
    "\120\015\110\016\117\017\105\020\114\021\111\022\123" +
    "\023\116\024\112\027\uffd6\030\uffd6\031\uffd6\042\uffd6\044" +
    "\uffd6\045\uffd6\047\uffd6\051\uffd6\053\uffd6\054\uffd6\001\002" +
    "\000\056\011\115\012\107\013\113\014\120\015\110\016" +
    "\117\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\042\uffdf\044\uffdf\045\uffdf\047" +
    "\uffdf\051\uffdf\053\uffdf\054\uffdf\001\002\000\056\011\115" +
    "\012\107\013\113\014\120\015\110\016\117\017\105\020" +
    "\114\021\111\022\123\023\116\024\112\027\uffd8\030\uffd8" +
    "\031\106\042\uffd8\044\uffd8\045\uffd8\047\uffd8\051\uffd8\053" +
    "\uffd8\054\uffd8\001\002\000\042\011\115\012\107\013\113" +
    "\014\120\015\110\016\117\017\105\020\114\021\111\022" +
    "\123\023\116\024\112\027\104\030\122\031\106\051\144" +
    "\001\002\000\060\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\027\uffa8\030\uffa8\031\uffa8\042\uffa8\044\uffa8\045" +
    "\uffa8\047\uffa8\050\145\051\uffa8\053\uffa8\054\uffa8\001\002" +
    "\000\024\012\064\026\073\032\066\033\063\034\067\035" +
    "\070\036\076\041\075\046\065\001\002\000\042\011\115" +
    "\012\107\013\113\014\120\015\110\016\117\017\105\020" +
    "\114\021\111\022\123\023\116\024\112\027\104\030\122" +
    "\031\106\051\147\001\002\000\056\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\027\uffa7\030\uffa7\031\uffa7\042" +
    "\uffa7\044\uffa7\045\uffa7\047\uffa7\051\uffa7\053\uffa7\054\uffa7" +
    "\001\002\000\004\044\uffb3\001\002\000\056\011\115\012" +
    "\107\013\113\014\120\015\110\016\117\017\105\020\114" +
    "\021\111\022\123\023\116\024\112\027\uffd9\030\uffd9\031" +
    "\uffd9\042\uffd9\044\uffd9\045\uffd9\047\uffd9\051\uffd9\053\uffd9" +
    "\054\uffd9\001\002\000\014\023\uffd4\044\uffd4\045\uffd4\047" +
    "\uffd4\050\uffd4\001\002\000\014\023\uffd1\044\uffd1\045\uffd1" +
    "\047\uffd1\050\uffd1\001\002\000\004\047\162\001\002\000" +
    "\014\023\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\001\002" +
    "\000\014\023\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2\001" +
    "\002\000\042\011\115\012\107\013\113\014\120\015\110" +
    "\016\117\017\105\020\114\021\111\022\123\023\116\024" +
    "\112\027\104\030\122\031\106\047\161\001\002\000\014" +
    "\023\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\001\002\000" +
    "\056\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\042\uffe8\044\uffe8\045\uffe8\047\uffe8" +
    "\051\uffe8\053\uffe8\054\uffe8\001\002\000\024\012\064\026" +
    "\073\032\066\033\063\034\067\035\070\036\076\041\075" +
    "\046\065\001\002\000\056\011\115\012\107\013\113\014" +
    "\120\015\110\016\117\017\105\020\114\021\111\022\123" +
    "\023\116\024\112\027\104\030\122\031\106\042\uffe2\044" +
    "\uffe2\045\uffe2\047\uffe2\051\uffe2\053\uffe2\054\uffe2\001\002" +
    "\000\056\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\027\uffef\030\uffef\031\uffef\042\uffef\044\uffef\045\uffef\047" +
    "\uffef\051\uffef\053\uffef\054\uffef\001\002\000\024\012\064" +
    "\026\073\032\066\033\063\034\067\035\070\036\076\041" +
    "\075\046\065\001\002\000\042\011\115\012\107\013\113" +
    "\014\120\015\110\016\117\017\105\020\114\021\111\022" +
    "\123\023\116\024\112\027\104\030\122\031\106\047\167" +
    "\001\002\000\004\044\uffc8\001\002\000\004\041\171\001" +
    "\002\000\004\043\201\001\002\000\006\041\173\054\174" +
    "\001\002\000\004\043\176\001\002\000\004\041\175\001" +
    "\002\000\004\044\uff9f\001\002\000\014\004\152\005\160" +
    "\006\156\007\153\010\155\001\002\000\004\044\200\001" +
    "\002\000\006\041\uffa0\054\uffa0\001\002\000\014\004\152" +
    "\005\160\006\156\007\153\010\155\001\002\000\004\044" +
    "\203\001\002\000\006\041\uffa1\054\uffa1\001\002\000\042" +
    "\002\ufffc\037\ufffc\040\ufffc\041\ufffc\052\ufffc\054\ufffc\055" +
    "\ufffc\057\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\067\ufffc\070\ufffc\074\ufffc\001\002\000\014\004\152\005" +
    "\160\006\156\007\153\010\155\001\002\000\004\023\207" +
    "\001\002\000\004\041\210\001\002\000\004\045\211\001" +
    "\002\000\004\071\212\001\002\000\004\070\213\001\002" +
    "\000\004\046\214\001\002\000\004\047\215\001\002\000" +
    "\004\044\uffa6\001\002\000\024\012\064\026\073\032\066" +
    "\033\063\034\067\035\070\036\076\041\075\046\065\001" +
    "\002\000\042\011\115\012\107\013\113\014\120\015\110" +
    "\016\117\017\105\020\114\021\111\022\123\023\116\024" +
    "\112\027\104\030\122\031\106\047\220\001\002\000\004" +
    "\053\221\001\002\000\036\037\051\040\005\041\015\052" +
    "\052\055\022\057\013\061\040\062\012\063\053\064\011" +
    "\065\025\067\030\070\041\074\046\001\002\000\040\037" +
    "\051\040\005\041\015\052\052\054\223\055\022\057\013" +
    "\061\040\062\012\063\053\064\011\065\025\067\030\070" +
    "\041\074\046\001\002\000\042\002\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\052\uffb7\054\uffb7\055\uffb7\057\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\067\uffb7\070\uffb7\074\uffb7" +
    "\001\002\000\042\002\ufffd\037\ufffd\040\ufffd\041\ufffd\052" +
    "\ufffd\054\ufffd\055\ufffd\057\ufffd\061\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\067\ufffd\070\ufffd\074\ufffd\001\002\000" +
    "\004\043\226\001\002\000\016\004\152\005\160\006\156" +
    "\007\153\010\155\041\230\001\002\000\010\044\uffcb\045" +
    "\244\050\245\001\002\000\004\045\231\001\002\000\004" +
    "\053\232\001\002\000\004\041\234\001\002\000\006\042" +
    "\237\054\240\001\002\000\004\043\235\001\002\000\024" +
    "\012\064\026\073\032\066\033\063\034\067\035\070\036" +
    "\076\041\075\046\065\001\002\000\044\011\115\012\107" +
    "\013\113\014\120\015\110\016\117\017\105\020\114\021" +
    "\111\022\123\023\116\024\112\027\104\030\122\031\106" +
    "\042\uff9e\054\uff9e\001\002\000\004\041\241\001\002\000" +
    "\004\044\uff9c\001\002\000\004\043\242\001\002\000\024" +
    "\012\064\026\073\032\066\033\063\034\067\035\070\036" +
    "\076\041\075\046\065\001\002\000\044\011\115\012\107" +
    "\013\113\014\120\015\110\016\117\017\105\020\114\021" +
    "\111\022\123\023\116\024\112\027\104\030\122\031\106" +
    "\042\uff9d\054\uff9d\001\002\000\024\012\064\026\073\032" +
    "\066\033\063\034\067\035\070\036\076\041\075\046\065" +
    "\001\002\000\004\051\246\001\002\000\006\045\247\050" +
    "\250\001\002\000\004\050\270\001\002\000\004\051\251" +
    "\001\002\000\004\045\252\001\002\000\004\050\253\001" +
    "\002\000\004\050\254\001\002\000\024\012\064\026\073" +
    "\032\066\033\063\034\067\035\070\036\076\041\075\046" +
    "\065\001\002\000\006\042\257\051\256\001\002\000\004" +
    "\044\uffad\001\002\000\004\050\260\001\002\000\024\012" +
    "\064\026\073\032\066\033\063\034\067\035\070\036\076" +
    "\041\075\046\065\001\002\000\006\042\264\051\263\001" +
    "\002\000\044\011\115\012\107\013\113\014\120\015\110" +
    "\016\117\017\105\020\114\021\111\022\123\023\116\024" +
    "\112\027\104\030\122\031\106\042\uffb2\051\uffb2\001\002" +
    "\000\006\042\uffaf\051\uffaf\001\002\000\024\012\064\026" +
    "\073\032\066\033\063\034\067\035\070\036\076\041\075" +
    "\046\065\001\002\000\044\011\115\012\107\013\113\014" +
    "\120\015\110\016\117\017\105\020\114\021\111\022\123" +
    "\023\116\024\112\027\104\030\122\031\106\042\uffb1\051" +
    "\uffb1\001\002\000\006\042\264\051\267\001\002\000\006" +
    "\042\uffb0\051\uffb0\001\002\000\024\012\064\026\073\032" +
    "\066\033\063\034\067\035\070\036\076\041\075\046\065" +
    "\001\002\000\006\042\264\051\272\001\002\000\004\044" +
    "\uffae\001\002\000\042\011\115\012\107\013\113\014\120" +
    "\015\110\016\117\017\105\020\114\021\111\022\123\023" +
    "\116\024\112\027\104\030\122\031\106\044\uffca\001\002" +
    "\000\042\002\ufff7\037\ufff7\040\ufff7\041\ufff7\052\ufff7\054" +
    "\ufff7\055\ufff7\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\067\ufff7\070\ufff7\074\ufff7\001\002\000\042\011" +
    "\115\012\107\013\113\014\120\015\110\016\117\017\105" +
    "\020\114\021\111\022\123\023\116\024\112\027\104\030" +
    "\122\031\106\044\ufff3\001\002\000\024\012\064\026\073" +
    "\032\066\033\063\034\067\035\070\036\076\041\075\046" +
    "\065\001\002\000\042\011\115\012\107\013\113\014\120" +
    "\015\110\016\117\017\105\020\114\021\111\022\123\023" +
    "\116\024\112\027\104\030\122\031\106\047\300\001\002" +
    "\000\004\053\301\001\002\000\036\037\051\040\005\041" +
    "\015\052\052\055\022\057\013\061\040\062\012\063\053" +
    "\064\011\065\025\067\030\070\041\074\046\001\002\000" +
    "\040\037\051\040\005\041\015\052\052\054\303\055\022" +
    "\057\013\061\040\062\012\063\053\064\011\065\025\067" +
    "\030\070\041\074\046\001\002\000\044\002\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\052\uffc1\054\uffc1\055\uffc1\056\304\057" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\067\uffc1" +
    "\070\uffc1\074\uffc1\001\002\000\006\053\306\055\022\001" +
    "\002\000\042\002\uffc2\037\uffc2\040\uffc2\041\uffc2\052\uffc2" +
    "\054\uffc2\055\uffc2\057\uffc2\061\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\067\uffc2\070\uffc2\074\uffc2\001\002\000\036" +
    "\037\051\040\005\041\015\052\052\055\022\057\013\061" +
    "\040\062\012\063\053\064\011\065\025\067\030\070\041" +
    "\074\046\001\002\000\040\037\051\040\005\041\015\052" +
    "\052\054\310\055\022\057\013\061\040\062\012\063\053" +
    "\064\011\065\025\067\030\070\041\074\046\001\002\000" +
    "\042\002\uffc3\037\uffc3\040\uffc3\041\uffc3\052\uffc3\054\uffc3" +
    "\055\uffc3\057\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\067\uffc3\070\uffc3\074\uffc3\001\002\000\042\002\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\052\ufff6\054\ufff6\055\ufff6\057" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\067\ufff6" +
    "\070\ufff6\074\ufff6\001\002\000\042\002\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\052\ufff8\054\ufff8\055\ufff8\057\ufff8\061\ufff8" +
    "\062\ufff8\063\ufff8\064\ufff8\065\ufff8\067\ufff8\070\ufff8\074" +
    "\ufff8\001\002\000\042\002\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\052\ufff5\054\ufff5\055\ufff5\057\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\067\ufff5\070\ufff5\074\ufff5\001\002" +
    "\000\004\011\340\001\002\000\024\012\064\026\073\032" +
    "\066\033\063\034\067\035\070\036\076\041\075\046\065" +
    "\001\002\000\024\012\064\026\073\032\066\033\063\034" +
    "\067\035\070\036\076\041\075\046\065\001\002\000\004" +
    "\012\325\001\002\000\004\072\321\001\002\000\004\046" +
    "\322\001\002\000\024\012\064\026\073\032\066\033\063" +
    "\034\067\035\070\036\076\041\075\046\065\001\002\000" +
    "\042\011\115\012\107\013\113\014\120\015\110\016\117" +
    "\017\105\020\114\021\111\022\123\023\116\024\112\027" +
    "\104\030\122\031\106\047\324\001\002\000\004\044\uffa5" +
    "\001\002\000\006\044\uffc6\047\uffc6\001\002\000\042\011" +
    "\115\012\107\013\113\014\120\015\110\016\117\017\105" +
    "\020\114\021\111\022\123\023\116\024\112\027\104\030" +
    "\122\031\106\051\327\001\002\000\006\045\330\050\331" +
    "\001\002\000\024\012\064\026\073\032\066\033\063\034" +
    "\067\035\070\036\076\041\075\046\065\001\002\000\024" +
    "\012\064\026\073\032\066\033\063\034\067\035\070\036" +
    "\076\041\075\046\065\001\002\000\042\011\115\012\107" +
    "\013\113\014\120\015\110\016\117\017\105\020\114\021" +
    "\111\022\123\023\116\024\112\027\104\030\122\031\106" +
    "\051\333\001\002\000\004\045\334\001\002\000\024\012" +
    "\064\026\073\032\066\033\063\034\067\035\070\036\076" +
    "\041\075\046\065\001\002\000\042\011\115\012\107\013" +
    "\113\014\120\015\110\016\117\017\105\020\114\021\111" +
    "\022\123\023\116\024\112\027\104\030\122\031\106\044" +
    "\uffab\001\002\000\042\011\115\012\107\013\113\014\120" +
    "\015\110\016\117\017\105\020\114\021\111\022\123\023" +
    "\116\024\112\027\104\030\122\031\106\044\uffac\001\002" +
    "\000\044\011\115\012\107\013\113\014\120\015\110\016" +
    "\117\017\105\020\114\021\111\022\123\023\116\024\112" +
    "\027\104\030\122\031\106\044\uffc9\047\uffc9\001\002\000" +
    "\006\044\uffc7\047\uffc7\001\002\000\004\002\001\001\002" +
    "\000\042\011\115\012\107\013\113\014\120\015\110\016" +
    "\117\017\105\020\114\021\111\022\123\023\116\024\112" +
    "\027\104\030\122\031\106\053\343\001\002\000\026\012" +
    "\064\026\073\032\066\033\063\034\067\035\070\036\076" +
    "\041\075\046\065\060\345\001\002\000\004\045\353\001" +
    "\002\000\004\045\uffbf\001\002\000\030\012\064\026\073" +
    "\032\066\033\063\034\067\035\070\036\076\041\075\046" +
    "\065\054\351\060\345\001\002\000\030\012\uffbd\026\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd\046" +
    "\uffbd\054\uffbd\060\uffbd\001\002\000\042\011\115\012\107" +
    "\013\113\014\120\015\110\016\117\017\105\020\114\021" +
    "\111\022\123\023\116\024\112\027\104\030\122\031\106" +
    "\045\uffc0\001\002\000\042\002\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\052\uffbb\054\uffbb\055\uffbb\057\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\067\uffbb\070\uffbb\074\uffbb\001" +
    "\002\000\030\012\uffbc\026\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\041\uffbc\046\uffbc\054\uffbc\060\uffbc\001" +
    "\002\000\004\023\354\001\002\000\004\053\355\001\002" +
    "\000\036\037\051\040\005\041\015\052\052\055\022\057" +
    "\013\061\040\062\012\063\053\064\011\065\025\067\030" +
    "\070\041\074\046\001\002\000\040\037\051\040\005\041" +
    "\015\052\052\054\357\055\022\057\013\061\040\062\012" +
    "\063\053\064\011\065\025\067\030\070\041\074\046\001" +
    "\002\000\030\012\uffbe\026\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\041\uffbe\046\uffbe\054\uffbe\060\uffbe\001" +
    "\002\000\004\041\361\001\002\000\004\045\315\001\002" +
    "\000\004\044\363\001\002\000\024\012\064\026\073\032" +
    "\066\033\063\034\067\035\070\036\076\041\075\046\065" +
    "\001\002\000\042\011\115\012\107\013\113\014\120\015" +
    "\110\016\117\017\105\020\114\021\111\022\123\023\116" +
    "\024\112\027\104\030\122\031\106\044\365\001\002\000" +
    "\004\041\367\001\002\000\004\047\372\001\002\000\010" +
    "\011\314\012\317\045\315\001\002\000\004\047\uffb6\001" +
    "\002\000\004\047\uffb5\001\002\000\004\053\373\001\002" +
    "\000\036\037\051\040\005\041\015\052\052\055\022\057" +
    "\013\061\040\062\012\063\053\064\011\065\025\067\030" +
    "\070\041\074\046\001\002\000\040\037\051\040\005\041" +
    "\015\052\052\054\375\055\022\057\013\061\040\062\012" +
    "\063\053\064\011\065\025\067\030\070\041\074\046\001" +
    "\002\000\042\002\uffb4\037\uffb4\040\uffb4\041\uffb4\052\uffb4" +
    "\054\uffb4\055\uffb4\057\uffb4\061\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\067\uffb4\070\uffb4\074\uffb4\001\002\000\042" +
    "\002\uffb8\037\uffb8\040\uffb8\041\uffb8\052\uffb8\054\uffb8\055" +
    "\uffb8\057\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\067\uffb8\070\uffb8\074\uffb8\001\002\000\042\002\ufffb\037" +
    "\ufffb\040\ufffb\041\ufffb\052\ufffb\054\ufffb\055\ufffb\057\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb\070" +
    "\ufffb\074\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\070\002\013\003\005\006\031\014\025\022" +
    "\022\023\043\024\036\025\015\026\034\027\044\030\030" +
    "\031\006\032\046\033\041\034\053\035\047\036\007\037" +
    "\033\040\017\041\023\042\026\044\020\045\003\046\035" +
    "\047\016\050\032\051\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\006\031\014\025\022\057\023\043" +
    "\024\036\025\015\026\034\027\044\030\030\031\006\032" +
    "\046\033\041\034\053\035\047\036\007\037\033\040\017" +
    "\041\023\042\026\044\020\045\003\046\035\047\016\050" +
    "\032\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\341\020" +
    "\070\021\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\274\020\070\021\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\003\055\006\031\014\025\022\022\023\043\024" +
    "\036\025\015\026\034\027\044\030\030\031\006\032\046" +
    "\033\041\034\053\035\047\036\007\037\033\040\017\041" +
    "\023\042\026\044\020\045\003\046\035\047\016\050\032" +
    "\051\042\001\001\000\064\006\031\014\025\022\057\023" +
    "\043\024\036\025\015\026\034\027\044\030\030\031\006" +
    "\032\046\033\041\034\053\035\047\036\007\037\033\040" +
    "\017\041\023\042\026\044\020\045\003\046\035\047\016" +
    "\050\032\051\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\073\020\070\021\071" +
    "\001\001\000\002\001\001\000\010\016\163\020\070\021" +
    "\071\001\001\000\012\016\156\020\070\021\071\052\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\150" +
    "\020\070\021\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\142\020\070\021\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\102\020\070\021\071\001\001\000\002\001\001\000\010" +
    "\016\141\020\070\021\071\001\001\000\010\016\140\020" +
    "\070\021\071\001\001\000\010\016\137\020\070\021\071" +
    "\001\001\000\010\016\136\020\070\021\071\001\001\000" +
    "\010\016\135\020\070\021\071\001\001\000\010\016\134" +
    "\020\070\021\071\001\001\000\010\016\133\020\070\021" +
    "\071\001\001\000\010\016\132\020\070\021\071\001\001" +
    "\000\010\016\131\020\070\021\071\001\001\000\010\016" +
    "\130\020\070\021\071\001\001\000\010\016\127\020\070" +
    "\021\071\001\001\000\010\016\126\020\070\021\071\001" +
    "\001\000\010\016\125\020\070\021\071\001\001\000\002" +
    "\001\001\000\010\016\124\020\070\021\071\001\001\000" +
    "\010\016\123\020\070\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\145\020\070\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\162\020\070\021\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\165\020\070\021\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\216\020\070" +
    "\021\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\003\221\006\031\014\025\022\022\023\043\024\036" +
    "\025\015\026\034\027\044\030\030\031\006\032\046\033" +
    "\041\034\053\035\047\036\007\037\033\040\017\041\023" +
    "\042\026\044\020\045\003\046\035\047\016\050\032\051" +
    "\042\001\001\000\064\006\031\014\025\022\057\023\043" +
    "\024\036\025\015\026\034\027\044\030\030\031\006\032" +
    "\046\033\041\034\053\035\047\036\007\037\033\040\017" +
    "\041\023\042\026\044\020\045\003\046\035\047\016\050" +
    "\032\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\235\020\070\021\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\242\020\070\021\071\001\001\000\002\001\001\000\010" +
    "\016\272\020\070\021\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\254\001\001\000" +
    "\012\004\265\016\261\020\070\021\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\260\016\261\020\070\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\264\020" +
    "\070\021\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\270\016\261\020\070\021" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\276\020\070\021\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\003\301\006\031\014\025\022\022\023" +
    "\043\024\036\025\015\026\034\027\044\030\030\031\006" +
    "\032\046\033\041\034\053\035\047\036\007\037\033\040" +
    "\017\041\023\042\026\044\020\045\003\046\035\047\016" +
    "\050\032\051\042\001\001\000\064\006\031\014\025\022" +
    "\057\023\043\024\036\025\015\026\034\027\044\030\030" +
    "\031\006\032\046\033\041\034\053\035\047\036\007\037" +
    "\033\040\017\041\023\042\026\044\020\045\003\046\035" +
    "\047\016\050\032\051\042\001\001\000\002\001\001\000" +
    "\004\033\304\001\001\000\002\001\001\000\066\003\306" +
    "\006\031\014\025\022\022\023\043\024\036\025\015\026" +
    "\034\027\044\030\030\031\006\032\046\033\041\034\053" +
    "\035\047\036\007\037\033\040\017\041\023\042\026\044" +
    "\020\045\003\046\035\047\016\050\032\051\042\001\001" +
    "\000\064\006\031\014\025\022\057\023\043\024\036\025" +
    "\015\026\034\027\044\030\030\031\006\032\046\033\041" +
    "\034\053\035\047\036\007\037\033\040\017\041\023\042" +
    "\026\044\020\045\003\046\035\047\016\050\032\051\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\336" +
    "\020\070\021\071\001\001\000\010\016\325\020\070\021" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\322\020\070\021\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\335\020\070\021" +
    "\071\001\001\000\010\016\331\020\070\021\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\334\020" +
    "\070\021\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\345\013\346\016\347\017\343" +
    "\020\070\021\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\013\351\016\347\017\343\020\070\021\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\003\355\006\031\014\025\022\022\023\043\024" +
    "\036\025\015\026\034\027\044\030\030\031\006\032\046" +
    "\033\041\034\053\035\047\036\007\037\033\040\017\041" +
    "\023\042\026\044\020\045\003\046\035\047\016\050\032" +
    "\051\042\001\001\000\064\006\031\014\025\022\057\023" +
    "\043\024\036\025\015\026\034\027\044\030\030\031\006" +
    "\032\046\033\041\034\053\035\047\036\007\037\033\040" +
    "\017\041\023\042\026\044\020\045\003\046\035\047\016" +
    "\050\032\051\042\001\001\000\002\001\001\000\004\027" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\363\020\070\021\071\001\001\000\002\001\001\000" +
    "\010\027\370\031\367\043\365\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\066\003\373\006\031\014\025\022\022" +
    "\023\043\024\036\025\015\026\034\027\044\030\030\031" +
    "\006\032\046\033\041\034\053\035\047\036\007\037\033" +
    "\040\017\041\023\042\026\044\020\045\003\046\035\047" +
    "\016\050\032\051\042\001\001\000\064\006\031\014\025" +
    "\022\057\023\043\024\036\025\015\026\034\027\044\030" +
    "\030\031\006\032\046\033\041\034\053\035\047\036\007" +
    "\037\033\040\017\041\023\042\026\044\020\045\003\046" +
    "\035\047\016\050\032\051\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> Ejecutar;
    public LinkedList<LinkedList<Instruccion>> CasesList =  new LinkedList<>();
    public LinkedList<Expresion> Caso =  new LinkedList<>();
    
    public String resultado = ""; 


    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errors error = new Errors("Sintáctico","Se esperaba este "+s.value,s.right, s.left);
            TextEditor.Errores.add(error);

            TextEditor.Print+="Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado"+"\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
            Errors error = new Errors("Sintáctico","Se esperaba este "+ s.value,s.right, s.left);
            TextEditor.Errores.add(error);
            TextEditor.Print+="Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion."+"\n";
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Ejecutar = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= Variables P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Func_Print P_Coma 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion p = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= Incremento_Decremento P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= Sen_Control 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= Sen_Ciclicas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= Sen_Transferencia P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= Vectores P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= Listas P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= Structs P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sen_Return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Return",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sen_Return ::= RETURN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Return",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sen_Transferencia ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sen_Transferencia ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sen_Transferencia ::= Sen_Return 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negacion("ERROR","ERROR",e,eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"+",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"-",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"*",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"/",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"**",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"%",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= P_ABRE EXPRESION P_CIERRA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;/*e.interpretar(null); RESULT=new Dato(e.getValor(),e.getTipo(), eright, eleft);*/ 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= ENTERO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"INT", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= DECIMAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"DOUBLE", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= BOOLEAN 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"BOOL", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= CAR 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"CHAR", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= CAD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"STRING", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= P_ABRE Tipos_Dato P_CIERRA EXPRESION 
            {
              Expresion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Casteo(tipo,e,eright, eleft);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccederVariables(id,idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= AccederVectores 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION COMPARACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"==",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION DIFERENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"!=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"<=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,">=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"<",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,">",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= NOT EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Not("true","BOOL",e,eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"&&",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"||",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"^",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= Remove_Valores_Listas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipos_Dato ::= INT 
            {
              String RESULT =null;
		 RESULT="INT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipos_Dato ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT="DOUBLE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipos_Dato ::= BOOL 
            {
              String RESULT =null;
		 RESULT="BOOL"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipos_Dato ::= CHAR 
            {
              String RESULT =null;
		 RESULT="CHAR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipos_Dato ::= STRING 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Mutabilidad ::= VAR 
            {
              String RESULT =null;
		 RESULT = "VAR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mutabilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Mutabilidad ::= CONST 
            {
              String RESULT =null;
		 RESULT = "CONST"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mutabilidad",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Variables ::= Dec_Variables 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variables",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Variables ::= Asignar_Valor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variables",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Dec_Variables ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new Declarar(null,ty,id,m,tyright, tyleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Variables",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Dec_Variables ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new Declarar(e,ty,id,m,tyright, tyleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Variables",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Asignar_Valor ::= IDENTIFICADOR IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignar(e,i,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Valor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Func_Print ::= PRINT P_ABRE EXPRESION P_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =new Print(a,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Func_Print",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Incremento_Decremento ::= IDENTIFICADOR MAS MAS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IncrementoDecremento(id,"++",idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento_Decremento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Incremento_Decremento ::= IDENTIFICADOR MENOS MENOS 
            {
              Instruccion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new IncrementoDecremento(id,"--",idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento_Decremento",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Sen_Control ::= Sen_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Control",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Sen_Control ::= Sen_Match 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Control",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Sen_IF ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i2 = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new IF(e,i,i2,null,eright,eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Sen_IF ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C ELSE Sen_IF 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion i2 = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new IF(e,i,null,i2,eright,eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Sen_IF ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new IF(e,i,null,null,eright,eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Entry_Cases ::= EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Entry_Cases",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Entry_Cases ::= DEFAULT 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(a,"STRING", aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Entry_Cases",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Cases ::= Entry_Cases IGUAL MAYOR LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 CasesList.add(i); Caso.add(a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cases",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Strcuct_Match ::= Cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Strcuct_Match",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Strcuct_Match ::= Strcuct_Match Cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Strcuct_Match",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Sen_Match ::= MATCH EXPRESION LLAVE_A Strcuct_Match LLAVE_C 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Match(CasesList, Caso, e, eright, eleft);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Match",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Sen_Ciclicas ::= Sen_While 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Sen_Ciclicas ::= Sen_For 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Sen_Ciclicas ::= Sen_Do_While P_Coma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Sen_While ::= WHILE P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(c,i,"While",cright, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_While",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Tipo_Incremento ::= Incremento_Decremento 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo_Incremento",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Tipo_Incremento ::= Asignar_Valor 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo_Incremento",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Sen_For ::= FOR P_ABRE Asignar_Valor P_Coma EXPRESION P_Coma Tipo_Incremento P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion in = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(i,a,e,in,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_For",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Sen_Do_While ::= DO LLAVE_A instrucciones LLAVE_C WHILE P_ABRE EXPRESION P_CIERRA 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<Instruccion> i = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(c,i,"Do",cright, cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Do_While",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Datos_Una_Dimension ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Una_Dimension",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Datos_Una_Dimension ::= Datos_Una_Dimension Coma EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Una_Dimension",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Datos_Dos_Dimension ::= C_ABRE Datos_Una_Dimension C_CIERRA 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Dos_Dimension",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Datos_Dos_Dimension ::= Datos_Dos_Dimension Coma C_ABRE Datos_Una_Dimension C_CIERRA 
            {
              LinkedList<LinkedList<Expresion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<LinkedList<Expresion>> a = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Datos_Dos_Dimension",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Dec_Vectores ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato C_ABRE C_CIERRA IGUAL C_ABRE Datos_Una_Dimension C_CIERRA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expresion> v1 = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vectores(v1,null,t,i,m,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Vectores",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Dec_Vectores ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato C_ABRE C_CIERRA C_ABRE C_CIERRA IGUAL C_ABRE Datos_Dos_Dimension C_CIERRA 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<LinkedList<Expresion>> v2 = (LinkedList<LinkedList<Expresion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vectores(null,v2,t,i,m,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Vectores",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Asignar_Valor_Vectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignar_Vectores(e,i,x,x,"Vector1",0,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Valor_Vectores",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Asignar_Valor_Vectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA C_ABRE EXPRESION C_CIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion y = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Asignar_Vectores(e,i,x,y,"Vector2",0,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Valor_Vectores",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Vectores ::= Dec_Vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vectores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Vectores ::= Asignar_Valor_Vectores 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vectores",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AccederVectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccederVectList(i,x,x,"Vector1",iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccederVectores",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AccederVectores ::= IDENTIFICADOR C_ABRE EXPRESION C_CIERRA C_ABRE EXPRESION C_CIERRA 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion x = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion y = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccederVectList(i,x,y,"Vector2",iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AccederVectores",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Declaracion_Listas ::= LIST MENOR Tipos_Dato MAYOR IDENTIFICADOR IGUAL NEW LIST P_ABRE P_CIERRA 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 RESULT = new Listas(new LinkedList<>(),t,i,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Listas",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Agregar_Lista ::= IDENTIFICADOR Punto APPEND P_ABRE EXPRESION P_CIERRA 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Append(e,i,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Agregar_Lista",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Remove_Valores_Listas ::= IDENTIFICADOR Punto REMOVE P_ABRE EXPRESION P_CIERRA 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove_Valor(e,id,idright, idleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Remove_Valores_Listas",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Listas ::= Declaracion_Listas 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Listas",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Listas ::= Agregar_Lista 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Listas",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Lista_Structs ::= IDENTIFICADOR Dos_Puntos Tipos_Dato P_Coma 
            {
              LinkedList<Atributo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Atributo a = new Atributo(i,t); RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Structs",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Lista_Structs ::= Lista_Structs IDENTIFICADOR Dos_Puntos Tipos_Dato P_Coma 
            {
              LinkedList<Atributo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Atributo> a = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; Atributo b = new Atributo(i,t); RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Structs",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Dec_Structs ::= STRUCT LLAVE_A Lista_Structs LLAVE_C IDENTIFICADOR 
            {
              Instruccion RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Atributo> att = (LinkedList<Atributo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Structs(i,att,iright, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Structs",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Nombre_Struct ::= IDENTIFICADOR Dos_Puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Nombre_Struct",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Nombre_Struct ::= Nombre_Struct Coma IDENTIFICADOR Dos_Puntos EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Nombre_Struct",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Instancia_Struct ::= Mutabilidad IDENTIFICADOR Dos_Puntos IDENTIFICADOR IGUAL LLAVE_A Nombre_Struct LLAVE_C 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Instancia_Struct",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Structs ::= Dec_Structs 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Structs",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Structs ::= Instancia_Struct 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Structs",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}

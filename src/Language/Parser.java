
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.LinkedList;
import Interpreter.Expresiones.*;
import Interpreter.Instrucciones.Print;
import Interpreter.Instruccion;
import Interpreter.Expresion;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\003\000\002\033\003\000" +
    "\002\033\004\000\002\031\003\000\002\031\004\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\032" +
    "\004\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\006\000\002\032\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\005\003\000\002\005\003\000\002\004\003\000" +
    "\002\004\003\000\002\006\006\000\002\006\010\000\002" +
    "\007\005\000\002\034\006\000\002\010\005\000\002\010" +
    "\005\000\002\011\003\000\002\011\003\000\002\014\006" +
    "\000\002\016\012\000\002\015\003\000\002\015\004\000" +
    "\002\013\011\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\005\000\002\021\003\000\002\021" +
    "\003\000\002\022\010\000\002\020\003\000\002\020\004" +
    "\000\002\017\007\000\002\023\003\000\002\023\003\000" +
    "\002\023\004\000\002\024\011\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\027\021\000\002\026\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\032\036\041\037\031\040\032\046\030\051" +
    "\016\053\040\055\010\056\036\057\021\060\026\061\005" +
    "\062\014\001\002\000\034\002\000\036\041\037\031\040" +
    "\032\046\030\051\016\053\040\055\010\056\036\057\021" +
    "\060\026\061\005\062\014\001\002\000\004\042\ufff4\001" +
    "\002\000\040\002\uffc3\036\uffc3\037\uffc3\040\uffc3\046\uffc3" +
    "\050\uffc3\051\uffc3\052\242\053\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002\000\036\002\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\046\uffb8\050\uffb8\051\uffb8\053" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\001\002\000\004\044\233\001\002\000\004\040\226\001" +
    "\002\000\036\002\uffb9\036\uffb9\037\uffb9\040\uffb9\046\uffb9" +
    "\050\uffb9\051\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\001\002\000\004\042\uffd1\001\002" +
    "\000\026\012\044\025\051\031\046\032\043\033\047\034" +
    "\050\035\054\040\053\042\ufff7\044\045\001\002\000\036" +
    "\002\uffff\036\uffff\037\uffff\040\uffff\046\uffff\050\uffff\051" +
    "\uffff\053\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\001\002\000\004\044\217\001\002\000\004\042" +
    "\216\001\002\000\004\042\215\001\002\000\004\047\206" +
    "\001\002\000\004\042\205\001\002\000\004\002\204\001" +
    "\002\000\004\042\ufff3\001\002\000\004\042\203\001\002" +
    "\000\004\042\ufff5\001\002\000\036\002\uffca\036\uffca\037" +
    "\uffca\040\uffca\046\uffca\050\uffca\051\uffca\053\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\001\002\000" +
    "\004\044\200\001\002\000\004\040\uffd3\001\002\000\010" +
    "\011\171\012\172\043\176\001\002\000\004\042\175\001" +
    "\002\000\036\002\ufffa\036\ufffa\037\ufffa\040\ufffa\046\ufffa" +
    "\050\ufffa\051\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\001\002\000\004\042\uffd2\001\002" +
    "\000\004\044\145\001\002\000\036\002\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\046\ufff9\050\ufff9\051\ufff9\053\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\001\002\000" +
    "\024\012\044\025\051\031\046\032\043\033\047\034\050" +
    "\035\054\040\053\044\045\001\002\000\004\040\uffd4\001" +
    "\002\000\036\002\uffc9\036\uffc9\037\uffc9\040\uffc9\046\uffc9" +
    "\050\uffc9\051\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\001\002\000\050\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\042\uffe9\043\uffe9\045\uffe9\047\uffe9\001\002\000\024\012" +
    "\044\025\051\031\046\032\043\033\047\034\050\035\054" +
    "\040\053\044\045\001\002\000\036\004\132\005\136\006" +
    "\133\007\140\010\135\012\044\025\051\031\046\032\043" +
    "\033\047\034\050\035\054\040\053\044\045\001\002\000" +
    "\050\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026" +
    "\uffea\027\uffea\030\uffea\042\uffea\043\uffea\045\uffea\047\uffea" +
    "\001\002\000\050\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\026\uffe8\027\uffe8\030\uffe8\042\uffe8\043\uffe8\045" +
    "\uffe8\047\uffe8\001\002\000\050\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7\042\uffe7" +
    "\043\uffe7\045\uffe7\047\uffe7\001\002\000\024\012\044\025" +
    "\051\031\046\032\043\033\047\034\050\035\054\040\053" +
    "\044\045\001\002\000\042\011\066\012\061\013\064\014" +
    "\072\015\060\016\071\017\055\020\065\021\062\022\073" +
    "\023\070\024\063\026\056\027\074\030\057\047\067\001" +
    "\002\000\050\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\042\uffe4\043\uffe4\045\uffe4" +
    "\047\uffe4\001\002\000\050\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030\uffe6\042\uffe6\043" +
    "\uffe6\045\uffe6\047\uffe6\001\002\000\024\012\044\025\051" +
    "\031\046\032\043\033\047\034\050\035\054\040\053\044" +
    "\045\001\002\000\024\012\044\025\051\031\046\032\043" +
    "\033\047\034\050\035\054\040\053\044\045\001\002\000" +
    "\024\012\044\025\051\031\046\032\043\033\047\034\050" +
    "\035\054\040\053\044\045\001\002\000\024\012\044\025" +
    "\051\031\046\032\043\033\047\034\050\035\054\040\053" +
    "\044\045\001\002\000\024\012\044\025\051\031\046\032" +
    "\043\033\047\034\050\035\054\040\053\044\045\001\002" +
    "\000\024\012\044\025\051\031\046\032\043\033\047\034" +
    "\050\035\054\040\053\044\045\001\002\000\024\012\044" +
    "\025\051\031\046\032\043\033\047\034\050\035\054\040" +
    "\053\044\045\001\002\000\024\012\044\025\051\031\046" +
    "\032\043\033\047\034\050\035\054\040\053\044\045\001" +
    "\002\000\024\012\044\025\051\031\046\032\043\033\047" +
    "\034\050\035\054\040\053\044\045\001\002\000\024\012" +
    "\044\025\051\031\046\032\043\033\047\034\050\035\054" +
    "\040\053\044\045\001\002\000\026\012\044\025\051\031" +
    "\046\032\043\033\047\034\050\035\054\040\053\044\045" +
    "\054\104\001\002\000\024\012\044\025\051\031\046\032" +
    "\043\033\047\034\050\035\054\040\053\044\045\001\002" +
    "\000\024\012\044\025\051\031\046\032\043\033\047\034" +
    "\050\035\054\040\053\044\045\001\002\000\024\012\044" +
    "\025\051\031\046\032\043\033\047\034\050\035\054\040" +
    "\053\044\045\001\002\000\024\012\044\025\051\031\046" +
    "\032\043\033\047\034\050\035\054\040\053\044\045\001" +
    "\002\000\024\012\044\025\051\031\046\032\043\033\047" +
    "\034\050\035\054\040\053\044\045\001\002\000\050\011" +
    "\066\012\061\013\064\014\072\015\060\016\071\017\055" +
    "\020\065\021\062\022\073\023\070\024\063\026\056\027" +
    "\uffdb\030\057\042\uffdb\043\uffdb\045\uffdb\047\uffdb\001\002" +
    "\000\050\011\066\012\061\013\064\014\072\015\060\016" +
    "\071\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\042\uffe1\043\uffe1\045\uffe1\047" +
    "\uffe1\001\002\000\050\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\060\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\026\uffee\027\uffee\030\uffee\042\uffee\043\uffee" +
    "\045\uffee\047\uffee\001\002\000\050\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\060\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\026\uffec\027\uffec\030\uffec\042" +
    "\uffec\043\uffec\045\uffec\047\uffec\001\002\000\050\011\066" +
    "\012\061\013\064\014\072\015\060\016\071\017\uffde\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027\uffde" +
    "\030\uffde\042\uffde\043\uffde\045\uffde\047\uffde\001\002\000" +
    "\004\043\111\001\002\000\030\012\044\025\051\031\046" +
    "\032\043\033\047\034\050\035\054\040\053\044\045\050" +
    "\107\054\104\001\002\000\004\043\uffbe\001\002\000\030" +
    "\012\uffbc\025\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\040\uffbc\044\uffbc\050\uffbc\054\uffbc\001\002\000\042" +
    "\011\066\012\061\013\064\014\072\015\060\016\071\017" +
    "\055\020\065\021\062\022\073\023\070\024\063\026\056" +
    "\027\074\030\057\043\uffbf\001\002\000\036\002\uffba\036" +
    "\uffba\037\uffba\040\uffba\046\uffba\050\uffba\051\uffba\053\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba\001" +
    "\002\000\030\012\uffbb\025\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\040\uffbb\044\uffbb\050\uffbb\054\uffbb\001" +
    "\002\000\004\023\112\001\002\000\004\047\113\001\002" +
    "\000\032\036\041\037\031\040\032\046\030\051\016\053" +
    "\040\055\010\056\036\057\021\060\026\061\005\062\014" +
    "\001\002\000\034\036\041\037\031\040\032\046\030\050" +
    "\116\051\016\053\040\055\010\056\036\057\021\060\026" +
    "\061\005\062\014\001\002\000\036\002\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\046\ufffe\050\ufffe\051\ufffe\053\ufffe\055\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000" +
    "\030\012\uffbd\025\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\040\uffbd\044\uffbd\050\uffbd\054\uffbd\001\002\000" +
    "\050\011\ufff1\012\ufff1\013\064\014\072\015\060\016\071" +
    "\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\042\ufff1\043\ufff1\045\ufff1\047\ufff1" +
    "\001\002\000\050\011\066\012\061\013\064\014\072\015" +
    "\060\016\071\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\030\uffe2\042\uffe2\043\uffe2\045" +
    "\uffe2\047\uffe2\001\002\000\050\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\060\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\026\uffef\027\uffef\030\uffef\042\uffef" +
    "\043\uffef\045\uffef\047\uffef\001\002\000\050\011\066\012" +
    "\061\013\064\014\072\015\060\016\071\017\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\023\uffe0\024\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\042\uffe0\043\uffe0\045\uffe0\047\uffe0\001\002\000\050" +
    "\011\066\012\061\013\064\014\072\015\060\016\071\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\042\uffdf\043\uffdf\045\uffdf\047\uffdf\001" +
    "\002\000\050\011\ufff0\012\ufff0\013\064\014\072\015\060" +
    "\016\071\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\042\ufff0\043\ufff0\045\ufff0" +
    "\047\ufff0\001\002\000\046\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\026\uffed\027\uffed\030\uffed\042\uffed\043\uffed\045" +
    "\uffed\047\uffed\001\002\000\050\011\066\012\061\013\064" +
    "\014\072\015\060\016\071\017\055\020\065\021\062\022" +
    "\073\023\070\024\063\026\uffda\027\uffda\030\uffda\042\uffda" +
    "\043\uffda\045\uffda\047\uffda\001\002\000\050\011\066\012" +
    "\061\013\064\014\072\015\060\016\071\017\055\020\065" +
    "\021\062\022\073\023\070\024\063\026\uffdc\027\uffdc\030" +
    "\057\042\uffdc\043\uffdc\045\uffdc\047\uffdc\001\002\000\050" +
    "\011\066\012\061\013\064\014\072\015\060\016\071\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\042\uffe3\043\uffe3\045\uffe3\047\uffe3\001" +
    "\002\000\050\011\066\012\061\013\064\014\072\015\060" +
    "\016\071\017\055\020\065\021\062\022\073\023\070\024" +
    "\063\026\uffdd\027\uffdd\030\uffdd\042\uffdd\043\uffdd\045\uffdd" +
    "\047\uffdd\001\002\000\010\042\uffd9\043\uffd9\045\uffd9\001" +
    "\002\000\010\042\uffd7\043\uffd7\045\uffd7\001\002\000\004" +
    "\045\142\001\002\000\010\042\uffd5\043\uffd5\045\uffd5\001" +
    "\002\000\010\042\uffd8\043\uffd8\045\uffd8\001\002\000\042" +
    "\011\066\012\061\013\064\014\072\015\060\016\071\017" +
    "\055\020\065\021\062\022\073\023\070\024\063\026\056" +
    "\027\074\030\057\045\141\001\002\000\010\042\uffd6\043" +
    "\uffd6\045\uffd6\001\002\000\050\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\042\uffeb" +
    "\043\uffeb\045\uffeb\047\uffeb\001\002\000\024\012\044\025" +
    "\051\031\046\032\043\033\047\034\050\035\054\040\053" +
    "\044\045\001\002\000\050\011\066\012\061\013\064\014" +
    "\072\015\060\016\071\017\055\020\065\021\062\022\073" +
    "\023\070\024\063\026\056\027\074\030\057\042\uffe5\043" +
    "\uffe5\045\uffe5\047\uffe5\001\002\000\050\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\042\ufff2\043\ufff2\045\ufff2\047\ufff2\001\002\000\004\040" +
    "\146\001\002\000\014\021\151\022\153\023\152\024\154" +
    "\043\147\001\002\000\024\012\uffb1\025\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\040\uffb1\044\uffb1\001\002" +
    "\000\024\012\044\025\051\031\046\032\043\033\047\034" +
    "\050\035\054\040\053\044\045\001\002\000\024\012\uffb4" +
    "\025\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\040" +
    "\uffb4\044\uffb4\001\002\000\024\012\uffb5\025\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\044\uffb5\001" +
    "\002\000\024\012\uffb2\025\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\040\uffb2\044\uffb2\001\002\000\024\012" +
    "\uffb3\025\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\040\uffb3\044\uffb3\001\002\000\042\011\066\012\061\013" +
    "\064\014\072\015\060\016\071\017\055\020\065\021\062" +
    "\022\073\023\070\024\063\026\056\027\074\030\057\042" +
    "\156\001\002\000\004\040\157\001\002\000\014\021\151" +
    "\022\153\023\152\024\154\043\147\001\002\000\024\012" +
    "\044\025\051\031\046\032\043\033\047\034\050\035\054" +
    "\040\053\044\045\001\002\000\042\011\066\012\061\013" +
    "\064\014\072\015\060\016\071\017\055\020\065\021\062" +
    "\022\073\023\070\024\063\026\056\027\074\030\057\042" +
    "\162\001\002\000\004\040\163\001\002\000\006\011\171" +
    "\012\172\001\002\000\004\045\165\001\002\000\004\047" +
    "\166\001\002\000\032\036\041\037\031\040\032\046\030" +
    "\051\016\053\040\055\010\056\036\057\021\060\026\061" +
    "\005\062\014\001\002\000\034\036\041\037\031\040\032" +
    "\046\030\050\170\051\016\053\040\055\010\056\036\057" +
    "\021\060\026\061\005\062\014\001\002\000\036\002\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\046\uffb0\050\uffb0\051\uffb0\053" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\001\002\000\004\011\174\001\002\000\004\012\173\001" +
    "\002\000\006\042\uffcb\045\uffcb\001\002\000\006\042\uffcc" +
    "\045\uffcc\001\002\000\036\002\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\046\uffb7\050\uffb7\051\uffb7\053\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\062\uffb7\001\002\000\024\012" +
    "\044\025\051\031\046\032\043\033\047\034\050\035\054" +
    "\040\053\044\045\001\002\000\042\011\066\012\061\013" +
    "\064\014\072\015\060\016\071\017\055\020\065\021\062" +
    "\022\073\023\070\024\063\026\056\027\074\030\057\042" +
    "\uffce\001\002\000\024\012\044\025\051\031\046\032\043" +
    "\033\047\034\050\035\054\040\053\044\045\001\002\000" +
    "\042\011\066\012\061\013\064\014\072\015\060\016\071" +
    "\017\055\020\065\021\062\022\073\023\070\024\063\026" +
    "\056\027\074\030\057\045\202\001\002\000\004\042\uffcd" +
    "\001\002\000\036\002\ufffb\036\ufffb\037\ufffb\040\ufffb\046" +
    "\ufffb\050\ufffb\051\ufffb\053\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\001\002\000\004\002\001\001" +
    "\002\000\036\002\ufff8\036\ufff8\037\ufff8\040\ufff8\046\ufff8" +
    "\050\ufff8\051\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\001\002\000\032\036\041\037\031" +
    "\040\032\046\030\051\016\053\040\055\010\056\036\057" +
    "\021\060\026\061\005\062\014\001\002\000\034\036\041" +
    "\037\031\040\032\046\030\050\210\051\016\053\040\055" +
    "\010\056\036\057\021\060\026\061\005\062\014\001\002" +
    "\000\004\055\211\001\002\000\004\044\212\001\002\000" +
    "\024\012\044\025\051\031\046\032\043\033\047\034\050" +
    "\035\054\040\053\044\045\001\002\000\042\011\066\012" +
    "\061\013\064\014\072\015\060\016\071\017\055\020\065" +
    "\021\062\022\073\023\070\024\063\026\056\027\074\030" +
    "\057\045\214\001\002\000\004\042\uffaf\001\002\000\036" +
    "\002\ufffc\036\ufffc\037\ufffc\040\ufffc\046\ufffc\050\ufffc\051" +
    "\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\001\002\000\036\002\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\046\ufffd\050\ufffd\051\ufffd\053\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\062\ufffd\001\002\000\024\012" +
    "\044\025\051\031\046\032\043\033\047\034\050\035\054" +
    "\040\053\044\045\001\002\000\042\011\066\012\061\013" +
    "\064\014\072\015\060\016\071\017\055\020\065\021\062" +
    "\022\073\023\070\024\063\026\056\027\074\030\057\045" +
    "\221\001\002\000\004\047\222\001\002\000\032\036\041" +
    "\037\031\040\032\046\030\051\016\053\040\055\010\056" +
    "\036\057\021\060\026\061\005\062\014\001\002\000\034" +
    "\036\041\037\031\040\032\046\030\050\224\051\016\053" +
    "\040\055\010\056\036\057\021\060\026\061\005\062\014" +
    "\001\002\000\040\002\uffc4\036\uffc4\037\uffc4\040\uffc4\046" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\001\002\000\042\011" +
    "\066\012\061\013\064\014\072\015\060\016\071\017\055" +
    "\020\065\021\062\022\073\023\070\024\063\026\056\027" +
    "\074\030\057\042\ufff6\001\002\000\004\041\227\001\002" +
    "\000\014\004\132\005\136\006\133\007\140\010\135\001" +
    "\002\000\006\042\uffd0\043\231\001\002\000\024\012\044" +
    "\025\051\031\046\032\043\033\047\034\050\035\054\040" +
    "\053\044\045\001\002\000\042\011\066\012\061\013\064" +
    "\014\072\015\060\016\071\017\055\020\065\021\062\022" +
    "\073\023\070\024\063\026\056\027\074\030\057\042\uffcf" +
    "\001\002\000\024\012\044\025\051\031\046\032\043\033" +
    "\047\034\050\035\054\040\053\044\045\001\002\000\042" +
    "\011\066\012\061\013\064\014\072\015\060\016\071\017" +
    "\055\020\065\021\062\022\073\023\070\024\063\026\056" +
    "\027\074\030\057\045\235\001\002\000\004\047\236\001" +
    "\002\000\032\036\041\037\031\040\032\046\030\051\016" +
    "\053\040\055\010\056\036\057\021\060\026\061\005\062" +
    "\014\001\002\000\034\036\041\037\031\040\032\046\030" +
    "\050\240\051\016\053\040\055\010\056\036\057\021\060" +
    "\026\061\005\062\014\001\002\000\036\002\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\046\uffb6\050\uffb6\051\uffb6\053\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\001\002" +
    "\000\040\002\uffc6\036\uffc6\037\uffc6\040\uffc6\046\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\055\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\001\002\000\006\047\250\051" +
    "\247\001\002\000\036\002\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\046\uffc2\050\uffc2\051\uffc2\053\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\060\uffc2\061\uffc2\062\uffc2\001\002\000\040\002\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\046\uffc1\050\uffc1\051\uffc1\052" +
    "\242\053\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\001\002\000\040\002\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\046\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\001\002\000" +
    "\036\002\uffc0\036\uffc0\037\uffc0\040\uffc0\046\uffc0\050\uffc0" +
    "\051\uffc0\053\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\062\uffc0\001\002\000\004\044\253\001\002\000\032" +
    "\036\041\037\031\040\032\046\030\051\016\053\040\055" +
    "\010\056\036\057\021\060\026\061\005\062\014\001\002" +
    "\000\034\036\041\037\031\040\032\046\030\050\252\051" +
    "\016\053\040\055\010\056\036\057\021\060\026\061\005" +
    "\062\014\001\002\000\036\002\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\046\uffc8\050\uffc8\051\uffc8\053\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\060\uffc8\061\uffc8\062\uffc8\001\002\000\024\012" +
    "\044\025\051\031\046\032\043\033\047\034\050\035\054" +
    "\040\053\044\045\001\002\000\042\011\066\012\061\013" +
    "\064\014\072\015\060\016\071\017\055\020\065\021\062" +
    "\022\073\023\070\024\063\026\056\027\074\030\057\045" +
    "\255\001\002\000\004\047\256\001\002\000\032\036\041" +
    "\037\031\040\032\046\030\051\016\053\040\055\010\056" +
    "\036\057\021\060\026\061\005\062\014\001\002\000\034" +
    "\036\041\037\031\040\032\046\030\050\260\051\016\053" +
    "\040\055\010\056\036\057\021\060\026\061\005\062\014" +
    "\001\002\000\040\002\uffc7\036\uffc7\037\uffc7\040\uffc7\046" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\055\uffc7\056\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\050\002\022\003\003\004\016\005\010\006" +
    "\034\007\012\010\024\011\033\012\026\013\005\017\041" +
    "\023\036\024\011\026\032\027\006\030\021\031\023\033" +
    "\014\034\017\001\001\000\044\004\016\005\010\006\034" +
    "\007\012\010\024\011\033\012\026\013\005\017\041\023" +
    "\036\024\011\026\032\027\006\030\021\031\023\033\114" +
    "\034\017\001\001\000\002\001\001\000\010\014\242\015" +
    "\243\016\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\143\001" +
    "\001\000\006\032\136\035\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\127\001\001\000\004\032\126\001\001\000" +
    "\004\032\125\001\001\000\004\032\124\001\001\000\004" +
    "\032\123\001\001\000\004\032\122\001\001\000\004\032" +
    "\121\001\001\000\004\032\120\001\001\000\004\032\117" +
    "\001\001\000\004\032\116\001\001\000\012\020\102\021" +
    "\101\022\104\032\105\001\001\000\004\032\100\001\001" +
    "\000\004\032\077\001\001\000\004\032\076\001\001\000" +
    "\004\032\075\001\001\000\004\032\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\101" +
    "\022\107\032\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\003\113\004" +
    "\016\005\010\006\034\007\012\010\024\011\033\012\026" +
    "\013\005\017\041\023\036\024\011\026\032\027\006\030" +
    "\021\031\023\033\014\034\017\001\001\000\044\004\016" +
    "\005\010\006\034\007\012\010\024\011\033\012\026\013" +
    "\005\017\041\023\036\024\011\026\032\027\006\030\021" +
    "\031\023\033\114\034\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\147\001\001\000" +
    "\002\001\001\000\004\032\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\157\001\001" +
    "\000\004\032\160\001\001\000\002\001\001\000\004\010" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\166\004\016\005\010\006\034\007" +
    "\012\010\024\011\033\012\026\013\005\017\041\023\036" +
    "\024\011\026\032\027\006\030\021\031\023\033\014\034" +
    "\017\001\001\000\044\004\016\005\010\006\034\007\012" +
    "\010\024\011\033\012\026\013\005\017\041\023\036\024" +
    "\011\026\032\027\006\030\021\031\023\033\114\034\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\176\001\001\000\002\001\001\000\004\032" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\206\004\016\005\010\006\034\007\012\010\024\011\033" +
    "\012\026\013\005\017\041\023\036\024\011\026\032\027" +
    "\006\030\021\031\023\033\014\034\017\001\001\000\044" +
    "\004\016\005\010\006\034\007\012\010\024\011\033\012" +
    "\026\013\005\017\041\023\036\024\011\026\032\027\006" +
    "\030\021\031\023\033\114\034\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\222\004\016\005\010\006\034\007" +
    "\012\010\024\011\033\012\026\013\005\017\041\023\036" +
    "\024\011\026\032\027\006\030\021\031\023\033\014\034" +
    "\017\001\001\000\044\004\016\005\010\006\034\007\012" +
    "\010\024\011\033\012\026\013\005\017\041\023\036\024" +
    "\011\026\032\027\006\030\021\031\023\033\114\034\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\227\001\001\000\002\001\001\000\004" +
    "\032\231\001\001\000\002\001\001\000\004\032\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\236" +
    "\004\016\005\010\006\034\007\012\010\024\011\033\012" +
    "\026\013\005\017\041\023\036\024\011\026\032\027\006" +
    "\030\021\031\023\033\014\034\017\001\001\000\044\004" +
    "\016\005\010\006\034\007\012\010\024\011\033\012\026" +
    "\013\005\017\041\023\036\024\011\026\032\027\006\030" +
    "\021\031\023\033\114\034\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\245\016\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\250\004\016\005" +
    "\010\006\034\007\012\010\024\011\033\012\026\013\005" +
    "\017\041\023\036\024\011\026\032\027\006\030\021\031" +
    "\023\033\014\034\017\001\001\000\044\004\016\005\010" +
    "\006\034\007\012\010\024\011\033\012\026\013\005\017" +
    "\041\023\036\024\011\026\032\027\006\030\021\031\023" +
    "\033\114\034\017\001\001\000\002\001\001\000\004\032" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\256\004\016\005\010\006\034\007\012\010\024\011" +
    "\033\012\026\013\005\017\041\023\036\024\011\026\032" +
    "\027\006\030\021\031\023\033\014\034\017\001\001\000" +
    "\044\004\016\005\010\006\034\007\012\010\024\011\033" +
    "\012\026\013\005\017\041\023\036\024\011\026\032\027" +
    "\006\030\021\031\023\033\114\034\017\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Instruccion> Ejecutar;
    public String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Ejecutar = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= Variables P_Coma 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Func_Print P_Coma 
            {
              Instruccion RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion p = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= Incremento_Decremento P_Coma 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= Sen_Control 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= Sen_Ciclicas 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= Sen_Transferencia P_Coma 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sen_Return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Return",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sen_Return ::= RETURN EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Return",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sen_Transferencia ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sen_Transferencia ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sen_Transferencia ::= Sen_Return 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Transferencia",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Negacion(e.getValor(),e.getTipo(),eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"+",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"-",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= EXPRESION POR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"*",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"/",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"**",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,"%",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= P_ABRE EXPRESION P_CIERRA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 e.interpretar(null); RESULT=new Dato(e.getValor(),e.getTipo(), eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= ENTERO 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"INT", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= DECIMAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"DOUBLE", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= BOOLEAN 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"BOOL", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= CAR 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"CHAR", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= CAD 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=new Dato(e,"STRING", eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION ::= P_ABRE Tipos_Dato P_CIERRA EXPRESION 
            {
              Expresion RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.interpretar(null); RESULT = new Dato(e.getValor(),tipo, eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= EXPRESION COMPARACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"==",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= EXPRESION DIFERENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"!=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"<=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,">=",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,"<",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,">",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= NOT EXPRESION 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 e.interpretar(null); RESULT = new Not(e.getValor(),e.getTipo(),eright, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"&&",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"||",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicas(a,"^",b,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipos_Dato ::= INT 
            {
              String RESULT =null;
		 RESULT="INT"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipos_Dato ::= DOUBLE 
            {
              String RESULT =null;
		 RESULT="DOUBLE"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipos_Dato ::= BOOL 
            {
              String RESULT =null;
		 RESULT="BOOL"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipos_Dato ::= CHAR 
            {
              String RESULT =null;
		 RESULT="CHAR"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipos_Dato ::= STRING 
            {
              String RESULT =null;
		 RESULT="STRING"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipos_Dato",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Mutabilidad ::= VAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mutabilidad",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Mutabilidad ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Mutabilidad",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Variables ::= Dec_Variables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Variables ::= Asignar_Valor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variables",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Dec_Variables ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Variables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Dec_Variables ::= Mutabilidad IDENTIFICADOR Dos_Puntos Tipos_Dato IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Dec_Variables",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Asignar_Valor ::= IDENTIFICADOR IGUAL EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Valor",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Func_Print ::= PRINT P_ABRE EXPRESION P_CIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =new Print(a,aright, aleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Func_Print",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Incremento_Decremento ::= IDENTIFICADOR MAS MAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento_Decremento",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Incremento_Decremento ::= IDENTIFICADOR MENOS MENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Incremento_Decremento",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Sen_Control ::= Sen_IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Control",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Sen_Control ::= Sen_Match 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Control",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Sen_Else ::= ELSE LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Else",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Sen_Else_If ::= ELSE IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Else_If",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bloque_Else_If ::= Sen_Else_If 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque_Else_If",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bloque_Else_If ::= Bloque_Else_If Sen_Else_If 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Bloque_Else_If",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // If_Simple ::= IF P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("If_Simple",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Sen_IF ::= If_Simple 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Sen_IF ::= If_Simple Sen_Else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Sen_IF ::= If_Simple Bloque_Else_If 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Sen_IF ::= If_Simple Bloque_Else_If Sen_Else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_IF",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Entry_Cases ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Entry_Cases",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Entry_Cases ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Entry_Cases",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Cases ::= Entry_Cases IGUAL MAYOR LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cases",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Strcuct_Match ::= Cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Strcuct_Match",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Strcuct_Match ::= Strcuct_Match Cases 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Strcuct_Match",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Sen_Match ::= MATCH EXPRESION LLAVE_A Strcuct_Match LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Match",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Sen_Ciclicas ::= Sen_While 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Sen_Ciclicas ::= Sen_For 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Sen_Ciclicas ::= Sen_Do_While P_Coma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Ciclicas",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Sen_While ::= WHILE P_ABRE EXPRESION P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_While",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Signos_For ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signos_For",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Signos_For ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signos_For",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Signos_For ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signos_For",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Signos_For ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signos_For",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Signos_For ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Signos_For",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Sen_For ::= FOR P_ABRE IDENTIFICADOR Signos_For EXPRESION P_Coma IDENTIFICADOR Signos_For EXPRESION P_Coma Incremento_Decremento P_CIERRA LLAVE_A instrucciones LLAVE_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_For",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-14)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Sen_Do_While ::= DO LLAVE_A instrucciones LLAVE_C WHILE P_ABRE EXPRESION P_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sen_Do_While",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
